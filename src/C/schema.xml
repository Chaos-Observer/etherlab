<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

<xsd:simpleType name="cstring">
 <xsd:restriction base="xsd:string">
  <xsd:pattern value="[a-zA-Z ]+"/>
 </xsd:restriction>
</xsd:simpleType>

<xsd:element name="description" type="cstring"/>
<xsd:element name="version" type="xsd:string"/>

<!-- 
The properties element defines various properties of the model. It can
define the following attributes:
  attribute           default Description
  ====================================================================
  max_overruns:       5       Execution is stopped after 5 overruns
  stacksize           2048    Stack size for real-time task
  photo_decimation    1       Decimation for passing values to buddy
  buffer_time         10      Buffer for transferring data to buddy

<properties max_overruns="5" stacksize="2048" 
      photo_decimation="1" buffer_time="10"/>
-->
<xsd:element name="properties">
 <xsd:complexType>
  <xsd:attribute name="max_overruns" type="xsd:positiveInteger" default="1"/>
  <xsd:attribute name="stacksize" type="xsd:positiveInteger" default="2048"/>
  <xsd:attribute name="photo_decimation" type="xsd:positiveInteger" 
        default="1"/>
  <xsd:attribute name="buffer_time" type="xsd:positiveInteger" default="10"/>
 </xsd:complexType>
</xsd:element>

<!-- Element task describes the tasks to be called. Task has to appear once,
     with basetick as an attribute defining the main tasks calling period
     in microseconds.
     Element task can have any number of subtask elements.
     Subtask elements must have a decimation attribute.
     eg
     
     <task basetick="1000">
       <subtask decimation="10"/>
       <subtask decimation="100"/>
     </task>

     will define a basic calling rate of 1000us for the main task, and
     two subtasks with calling rates of 0.01ms and 0.1ms
-->
<xsd:element name="task">
 <xsd:complexType>
  <xsd:sequence>
   <xsd:element name="subtask" minOccurs="0" maxOccurs="unbounded">
    <xsd:complexType>
     <xsd:attribute name="decimation" type="xsd:positiveInteger" 
        use="required"/>
    </xsd:complexType>
   </xsd:element>
  </xsd:sequence>
  <xsd:attribute name="basetick" type="xsd:positiveInteger" use="required"/>
 </xsd:complexType>
</xsd:element>

<xsd:simpleType name="orientation">
 <xsd:restriction base="xsd:string">
  <xsd:enumeration value="vector"/>
  <xsd:enumeration value="matrix_row_major"/>
  <xsd:enumeration value="matrix_col_major"/>
 </xsd:restriction>
</xsd:simpleType>

<xsd:simpleType name="datatype">
 <xsd:restriction base="xsd:string">
  <xsd:enumeration value="double_T"/>
  <xsd:enumeration value="float_T"/>
  <xsd:enumeration value="boolean_T"/>
  <xsd:enumeration value="uint8_T"/>
  <xsd:enumeration value="sint8_T"/>
  <xsd:enumeration value="uint16_T"/>
  <xsd:enumeration value="sint16_T"/>
  <xsd:enumeration value="uint32_T"/>
  <xsd:enumeration value="sint32_T"/>
 </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="variable">
    <xsd:attribute name="name" type="xsd:string" use="required"/>
    <xsd:attribute name="cvar" type="xsd:string" use="required"/>
    <xsd:attribute name="datatype" type="datatype" use="required"/>
    <xsd:attribute name="orientation" type="orientation"/>
    <xsd:attribute name="elements" type="xsd:positiveInteger"/>
    <xsd:attribute name="rnum" type="xsd:positiveInteger"/>
    <xsd:attribute name="cnum" type="xsd:positiveInteger"/>
</xsd:complexType>

<!-- Not using this, but this is a proposal for a list of values that
     is used to initialise parameters 
-->
<xsd:simpleType name="paraminitval">
 <xsd:list>
  <xsd:simpleType>
   <xsd:union>
    <xsd:simpleType>
     <xsd:restriction base="xsd:integer"/>
    </xsd:simpleType>
    <xsd:simpleType>
     <xsd:restriction base="xsd:double"/>
    </xsd:simpleType>
     <xsd:simpleType>
      <xsd:restriction base="xsd:string">
       <xsd:pattern value=", *"/>
      </xsd:restriction>
     </xsd:simpleType>
   </xsd:union>
  </xsd:simpleType>
 </xsd:list>
</xsd:simpleType>

<xsd:element name="parameter">
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="variable">
    <xsd:attribute name="value" type="xsd:string" use="required"/>
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="signal">
 <xsd:complexType>
  <xsd:complexContent>
   <xsd:extension base="variable">
    <xsd:attribute name="sampleTimeIndex" type="xsd:nonNegativeInteger" 
        use="required"/>
    <xsd:attribute name="alias" type="xsd:string"/>
   </xsd:extension>
  </xsd:complexContent>
 </xsd:complexType>
</xsd:element>

<xsd:element name="subsystem">
 <xsd:complexType>
  <xsd:sequence maxOccurs="unbounded">
   <xsd:choice>
    <xsd:element ref="parameter"/>
    <xsd:element ref="signal"/>
    <xsd:element ref="subsystem"/>
   </xsd:choice>
  </xsd:sequence>
  <xsd:attribute name="name" type="xsd:string" use="required"/>
 </xsd:complexType>
</xsd:element>

<xsd:element name="data">
 <xsd:complexType>
  <xsd:sequence maxOccurs="unbounded">
   <xsd:choice>
    <xsd:element ref="parameter"/>
    <xsd:element ref="signal"/>
    <xsd:element ref="subsystem"/>
   </xsd:choice>
  </xsd:sequence>
 </xsd:complexType>
</xsd:element>

<xsd:element name="model">
  <xsd:complexType>
    <xsd:sequence>
      <xsd:element ref="description"/>
      <xsd:element ref="version"/>
      <xsd:element ref="properties" minOccurs="0"/>
      <xsd:element ref="task"/>
      <xsd:element ref="data"/>
    </xsd:sequence>
    <xsd:attribute name="name" type="xsd:string" use="required"/>
  </xsd:complexType>
</xsd:element>

</xsd:schema>
