%implements "el41xx" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Analog Output Terminal
%% series EL41xx
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of a analog output
%% terminal.
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign MasterIdx = InitEtherCATMaster(block, system, MasterId)
  %assign DomainIdx = InitEtherCATDomain(block, system, MasterIdx)
  %<InitEtherCATSlave( block, system, MasterIdx, DomainIdx, SlaveAddr)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Registering analog output with EtherCAT Driver
   */
  %foreach sigIdx = Width
    %<RegisterEtherCATSlave(block, system, "%<Output_PDO>%<sigIdx+1>", \
        LibBlockPWork(DA_Word,"","",sigIdx))>
  %endforeach
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if Signed
    %assign InputType = "int16_T"
    %assign InputScale = 32768.0
    %assign InputMax = 32765.0
    %assign InputMin = -32768.0
  %else
    %assign InputType = "uint16_T"
    %assign InputScale = 65536.0
    %assign InputMax = 65535.0
    %assign InputMin = 0.0
  %endif
  %%
  /* %<Type> Block: %<Name> 
   * DEBUG: Width=%<Width> StatusOp=%<StatusOp> 
   *        VectorizedOp=%<VectorOp> RawOp=%<RawOp>
   */

  /* %<Type> Block: %<Name> 
   * Data */
  %if !RawOp
    { real_T out_val;
  %endif
  %foreach sigIdx = Width
    %if StatusOp
      %assign ys = LibBlockOutputSignal(0,"","",sigIdx)
      %assign us = "*(uint8_T *)(%<LibBlockPWork(StatusByte,"","",sigIdx)>)"

      %<ys> = %<us>;
    %%
    %endif
    %%
    %assign y0 = "*(%<InputType>*)(%<LibBlockPWork(DA_Word,"","",sigIdx)>)"
    %%
    %if VectorOp
      %% Single output vectorized;
      %assign u0 = LibBlockInputSignal(0,"","",sigIdx)
    %else
      %% Fanned, separate outputs;
      %assign u0 = LibBlockInputSignal(sigIdx,"","",0)
    %endif
    %if RawOp
      %% Raw unmodified form.
      %<y0> = %<u0>;
    %else
      %% Double form; scale according min and max of Device

      out_val = %<InputScale>*(%<u0> - %<RawOffset>)/%<RawFullScale>;
      #if defined(rt_SATURATE)
      %<y0> = (%<InputType>)(rt_SATURATE(out_val,%<InputMin>,%<InputMax>));
      #else
      %<y0> = 
        (%<InputType>)( out_val > %<InputMax> ? %<InputMax> \
        : (out_val < %<InputMin> ? %<InputMin> : out_val));
      #endif
    %endif
    %%
  %endforeach
  %if !RawOp
    }
  %endif
%endfunction
