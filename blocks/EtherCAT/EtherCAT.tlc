%%
%% Generic Routines to handle EtherCAT
%% 
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "ETL.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function InitEtherCAT() void
%% This function checks whether the EtherCAT system has been called once
%% before already, which is demonstrated by the existance of variable 
%% ::EtherCAT. If not, include C-header file for EtherCAT, 
%% and declare a variable where the slave's data structure is placed 
%% by EtherCAT when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if !EXISTS(CompiledModel.EtherCAT)
    %assign model_c = LibGetModelDotCFile()

    %<InitETL()>

    %trace "Initializing EtherCAT Interface"
    %if LibNumDiscreteSampleTimes() > 1
      %assign Tid01Eq = %<ISEQUAL(LibGetClockTickStepSize(0), \
                          LibGetClockTickStepSize(1))>
    %else
      %assign Tid01Eq = 0
    %endif
    %addtorecord CompiledModel EtherCAT { ...
                NumTasks 0 ...
                Pdo "pdo" ...
                Slave "slave" ...
                SlaveOwner "" ...
                Tid01Eq %<Tid01Eq> ...
                }

    %with CompiledModel
      %% EtherCAT header
      %<LibAddToCommonIncludes("ecrt_support.h")>
  
      %openfile buf
      struct ecat_slave_block *%<EtherCAT.Slave>;
      %closefile buf
      %<LibMdlStartCustomCode(buf, "header")>
  
      %openfile buf
      /* Sample times for EtherCAT */
      unsigned int ec_st[] = {
      %foreach tid = LibNumDiscreteSampleTimes()
          %<CAST("Unsigned",LibGetClockTickStepSize(tid)*1000000)>,
      %endforeach
          0U };
      %closefile buf
      %<LibMdlStartCustomCode(buf, "header")>

      %openfile buf
  
      /* Initialising EtherCAT Support system */
      if ((%<ETL.ErrStr> = ecs_init( ec_st))) {
          snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>),
                   "Could not initialise EtherCAT Support layer: %s",
                   %<ETL.ErrStr>);
          %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
          return;
      }
  %%/*
  %%        LibIsSingleRateModel %<LibIsSingleRateModel()>
  %%        LibNumAsynchronousSampleTimes %<LibNumAsynchronousSampleTimes()>
  %%        LibNuEmDiscreteSampleTimes %<LibNumDiscreteSampleTimes()>
  %%        Tid01Eq %<EtherCAT.Tid01Eq>
  %%%foreach TID = LibNumDiscreteSampleTimes()
  %%%assign tid = %<TID>
  %%
  %%        Sample time %<TID>
  %%        LibIsContinuous %<LibIsContinuous(TID)>
  %%        LibIsDiscrete %<LibIsDiscrete(TID)>
  %%        LibTriggeredTID %<LibTriggeredTID(tid)>
  %%        LibGetClockTickStepSize %<LibGetClockTickStepSize(tid)>
  %%        LibAsynchronousTriggeredTID %<LibAsynchronousTriggeredTID(tid)>
  %%        LibGetClockTickDataTypeId %<LibGetClockTickDataTypeId(tid)>
  %%%endforeach 
  %%*/
      %closefile buf
      %<LibMdlStartCustomCode(buf, "execution")>
  
      %openfile buf
  
      /* Starting EtherCAT subsystem */
      if ((%<ETL.ErrStr> = ecs_start())) {
            snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
               "Starting EtherCAT subsystem failed: %s", %<ETL.ErrStr>);
            %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
            return;
      }
      %closefile buf
      %<LibMdlStartCustomCode(buf, "trailer")>
  
      %openfile buf
  
      /* Shutting down EtherCAT subsystem */
      ecs_end();
      %closefile buf
      %<LibMdlTerminateCustomCode(buf, "execution")>
  
  %endwith
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetEtherCATTaskIdx(Tid)
%% Find the record index for sample time %<SampleTime>
%% Return: SampleTimeIdx : index in EtherCAT if found
%%         -1: not found
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %with EtherCAT
    %foreach m = NumTasks
      %if Task[m].Tid == Tid
        %trace "Found sample time %<Tid> @ Idx %<m>"
        %return m
      %endif
    %endforeach
  %endwith
  %return -1
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function InitEtherCATTask( block, system)
%% Make sure the domain for the block's sample time exists
%% Return: Idx : index in EtherCAT.Task[Idx]
%%                      correspondig to block's Tid
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %with EtherCAT
    %% Get Task ID of the block
    %assign tid = LibGetGlobalTIDFromLocalSFcnTID(0)
    %% And the Step Size thereof
    %assign Ts = LibGetClockTickStepSize(tid)

    %if EtherCAT.Tid01Eq && tid == 1
        %assign tid = 0
    %endif

    %addtorecord block EtherCATTid tid

    %assign Idx = GetEtherCATTaskIdx(tid)

    %if Idx != -1
      %% SampleDomain has been registered already
      %return Idx
    %endif

    %% No domain exists with this Task Id

    %%
    %% Insert a new Task with this task id
    %%
    %assign TaskIdx = EtherCAT.NumTasks
    %assign EtherCAT.NumTasks = TaskIdx + 1
    %addtorecord EtherCAT Task { ...
          Tid tid ...
          SampleTime Ts ...
          }
    %trace "Added new Task for SampleTime %<Ts> @ %<TaskIdx>"

    %openfile buf

    /* EtherCAT Process for Sample Time [%<Ts>] */
    if (%<LibIsSampleHit(tid)>) {
      ecs_receive(%<tid>);
      #ifdef ASYNC_ECAT
      ecs_send(%<tid>);
      #endif
    }
    %closefile buf
    %<LibSystemOutputCustomCode(system,buf,"execution")>

    %openfile buf

    /* EtherCAT Queue for Sample Time [%<Ts>] */
    #ifndef ASYNC_ECAT
    if (%<LibIsSampleHit(tid)>) {
      ecs_send(%<tid>);
    }
    #endif
    %closefile buf
    %<LibSystemOutputCustomCode(system,buf,"trailer")>

  %endwith

  %return TaskIdx
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function CheckSlaveOwner( block ) void
%%
%% Complex blocks that repeatedly call functions from this library 
%% at different times rely on the fact that the global 
%% variable %<EtherCAT.Slave> is initialised by it.
%% 
%% This internal function should be called from every function that relies on
%% the fact that the global variable %<EtherCAT.Slave> is initialised correctly
%%
%% Parameters:
%%      block:          block pointer as passed by TLC itself
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if EtherCAT.SlaveOwner != "%<LibGetFormattedBlockPath(block)>"
     %if EtherCAT.SlaveOwner == ""
       %error ############# Internal TLC Error for block ...
              %<LibGetFormattedBlockPath(block)>: ...
              EtherCAT slave identifier %<EtherCAT.Slave> is not initialised. ...
              First call RegisterEtherCATSlaveBlock() to register the slave ...
              #############
     %else
       %error ############# Internal TLC Error for block ...
              %<LibGetFormattedBlockPath(block)>: ...
              EtherCAT slave identifier %<EtherCAT.Slave> was initialised ...
              by block %<EtherCAT.SlaveOwner>. ...
              First call RegisterEtherCATSlaveBlock() for this block. ...
              #############
     %endif
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSlaveBlock( block, DeviceModel, ...
        MasterId, SlaveAddr, SlaveOutput) Output
%% 
%% This is the first call for complex blocks.
%% 
%% Complex EtherCAT blocks are those that have multiple inputs/outputs or
%% those that get parameterised. This function initialises %<EtherCAT.Slave>
%% for this block.
%%
%% Parameters:
%%      block:          block pointer as passed by TLC itself
%%      DeviceModel:    Model Name of the EtherCAT slave; found in ecdb.h
%%      MasterId:       <int> Master Id (passed directly to the EtherCAT
%%                      driver
%%      SlaveAddr:      <string> Address with which the slave is identified
%%      SlaveOutput:    0 = Slave is a simulink source block
%%                      1 = Slave is a simulink sink block
%%                      This parameter is used to make sure that sink blocks
%%                      are not used repeatedly. Slaves that get configured
%%                      (using SDO) should also have this flag set, even though
%%                      they are source blocks.
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if (!(%<EtherCAT.Slave> = ecs_reg_slave_block( \
        %<block.EtherCATTid>, %<MasterId>, "%<SlaveAddr>", \
        %<DeviceModel>, %<SlaveOutput>, &%<ETL.ErrStr>))) {
    snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
       "Registering of EtherCAT slave %<LibGetFormattedBlockPath(block)> "
       "failed: %s", %<ETL.ErrStr>);
    %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
    return;
  }
  %assign EtherCAT.SlaveOwner = "%<LibGetFormattedBlockPath(block)>"
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSlavePDOMap( block, PDODirection, Map ) Output
%% 
%% Change the PDO Mapping of an EtherCAT slave
%% 
%% Intelligent EtherCAT slaves have the ability to change the mapping of
%% their PDO's.
%% 
%% Parameters:
%%      block:          block pointer as passed by TLC itself
%%      PDODirection:   <string> The direction as seen by the slave 
%%                      "T" = remap TxPDO
%%                      "R" = remap RxPDO
%%      Map:            An array of the map values
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<CheckSlaveOwner(block)>
  %switch PDODirection
    %case "T"
    %case "t"
    %case "R"
    %case "r"
    %break
    %default
       %error ############# Internal TLC Error for ...
           block %<LibGetFormattedBlockPath(block)>: ...
           PDODirection = '%<PDODirection>'; ...
           PDO Direction can only be one of [TtRr]
  %endswitch
  %assign ArrayId = "%<PDODirection>xPDOMap"
  { 
    uint16_t %<ArrayId>[] =  {
    %foreach i = SIZE(Map)[1]
       %<Map[i]>, \
    %endforeach
    0 };
    if ((%<ETL.ErrStr> = ecs_reg_slave_pdomapping(%<EtherCAT.Slave>, \
          '%<PDODirection>', %<ArrayId>))) {
      snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
         "Remapping PDO's on EtherCAT slave %<LibGetFormattedBlockPath(block)> "
         "failed: %s", %<ETL.ErrStr>);
      %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
      return;
    }
  }
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSlavePDO( block, PDOEntry, DataPtr) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if ((%<ETL.ErrStr> = ecs_reg_slave_pdo( %<EtherCAT.Slave>, \
           %<PDOEntry>, &%<DataPtr>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> register "
           "PDO failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSimplePDO( block, DeviceModel, PDOEntry, ...
        MasterId, SlaveAddr, Output, DataPtr) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if ((%<ETL.ErrStr> = ecs_reg_pdo( \
           %<block.EtherCATTid>, \
           %<MasterId>, "%<SlaveAddr>", \
           %<DeviceModel>, %<PDOEntry>, %<Output>, &%<DataPtr>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> register "
           "failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSlaveSDO( block, DataType, Index, Subindex, ...
        Value) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<CheckSlaveOwner(block)>
  %switch DataType
    %case 8
    %case 16
    %case 32
    %break
    %default
       %error ############# Internal TLC Error for ...
           block %<LibGetFormattedBlockPath(block)>: ...
           DataType = %<DataType>; Choose one of 8,16,32
  %endswitch
  if ((%<ETL.ErrStr> = ecs_reg_slave_sdo( %<EtherCAT.Slave>, \
           %<DataType>, %<Index>, %<Subindex>, %<Value>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> SDO register "
           "failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterEtherCATSlaveAddrRange( block, DeviceModel, ...
        MasterId, SlaveAddr, RdWr, ImageOffset, ImageLength, DataPtr) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  if ((%<ETL.ErrStr> = ecs_reg_pdo_range( 
           %<block.EtherCATTid>, \
           %<MasterId>, "%<SlaveAddr>", \
           %<DeviceModel>, %<RdWr>, %<ImageOffset>, %<ImageLength>, \
           &%<DataPtr>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> range register "
           "failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function RegisterPDOMapping( block, dir, PDOMap) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%endfunction
