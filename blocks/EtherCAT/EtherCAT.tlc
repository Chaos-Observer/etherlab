%%
%% Generic Routines to handle EtherCAT
%% 
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "ETL.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function InitEtherCAT() void
%% This function checks whether the EtherCAT system has been called once
%% before already, which is demonstrated by the existance of variable 
%% ::EtherCAT. If not, include C-header file for EtherCAT, 
%% and declare a variable where the slave's data structure is placed 
%% by EtherCAT when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if !EXISTS(CompiledModel.EtherCAT)
    %<InitETL()>

    %trace "Initializing EtherCAT Interface"
    %if LibNumDiscreteSampleTimes() > 1
      %assign Tid01Eq = %<ISEQUAL(LibGetClockTickStepSize(0), \
                          LibGetClockTickStepSize(1))>
    %else
      %assign Tid01Eq = 0
    %endif
    %addtorecord CompiledModel EtherCAT { ...
                NumTasks 0 ...
                Pdo "pdo" ...
                Slave "slave" ...
                SlaveOwner "" ...
                Tid01Eq %<Tid01Eq> ...
                PDOMap {} ...
                SlaveCount 0 ...
                model_c LibGetModelDotCFile() ...
                }

    %with CompiledModel
      %% EtherCAT header
      %<LibAddToCommonIncludes("include/ecrt_support.h")>
      %<LibAddToCommonIncludes("include/etl_data_info.h")>
  
      %openfile buf
      /* Sample times for EtherCAT */
      unsigned int ec_st[] = {
      %foreach tid = LibNumDiscreteSampleTimes()
          %<CAST("Unsigned",LibGetClockTickStepSize(tid)*1000000)>,
      %endforeach
          0U };
      %closefile buf
      %<LibMdlStartCustomCode(buf, "header")>

      %openfile buf
  
      /* Initialising EtherCAT Support system */
      if ((%<ETL.ErrStr> = ecs_init( ec_st))) {
          snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>),
                   "Could not initialise EtherCAT Support layer: %s",
                   %<ETL.ErrStr>);
          %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
          return;
      }
  %%/*
  %%        LibIsSingleRateModel %<LibIsSingleRateModel()>
  %%        LibNumAsynchronousSampleTimes %<LibNumAsynchronousSampleTimes()>
  %%        LibNuEmDiscreteSampleTimes %<LibNumDiscreteSampleTimes()>
  %%        Tid01Eq %<EtherCAT.Tid01Eq>
  %%%foreach TID = LibNumDiscreteSampleTimes()
  %%%assign tid = %<TID>
  %%
  %%        Sample time %<TID>
  %%        LibIsContinuous %<LibIsContinuous(TID)>
  %%        LibIsDiscrete %<LibIsDiscrete(TID)>
  %%        LibTriggeredTID %<LibTriggeredTID(tid)>
  %%        LibGetClockTickStepSize %<LibGetClockTickStepSize(tid)>
  %%        LibAsynchronousTriggeredTID %<LibAsynchronousTriggeredTID(tid)>
  %%        LibGetClockTickDataTypeId %<LibGetClockTickDataTypeId(tid)>
  %%%endforeach 
  %%*/
      %closefile buf
      %<LibMdlStartCustomCode(buf, "execution")>
  
      %openfile buf
  
      /* Starting EtherCAT subsystem */
      if ((%<ETL.ErrStr> = ecs_start())) {
            snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
               "Starting EtherCAT subsystem failed: %s", %<ETL.ErrStr>);
            %<LibSetRTModelErrorStatus("%<ETL.ErrMsg>")>;
            return;
      }
      %closefile buf
      %<LibMdlStartCustomCode(buf, "trailer")>
  
      %openfile buf
  
      /* Shutting down EtherCAT subsystem */
      ecs_end();
      %closefile buf
      %<LibMdlTerminateCustomCode(buf, "execution")>
  
  %endwith
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetEtherCATTaskIdx(Tid)
%% Find the record index for sample time %<SampleTime>
%% Return: SampleTimeIdx : index in EtherCAT if found
%%         -1: not found
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %with EtherCAT
    %foreach m = NumTasks
      %if Task[m].Tid == Tid
        %trace "Found sample time %<Tid> @ Idx %<m>"
        %return m
      %endif
    %endforeach
  %endwith
  %return -1
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function InitEtherCATTask( block, system)
%% Make sure the domain for the block's sample time exists
%% Return: Idx : index in EtherCAT.Task[Idx]
%%                      correspondig to block's Tid
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %with EtherCAT
    %% Get Task ID of the block
    %assign tid = LibGetGlobalTIDFromLocalSFcnTID(0)
    %% And the Step Size thereof
    %assign Ts = LibGetClockTickStepSize(tid)

    %if EtherCAT.Tid01Eq && tid == 1
        %assign tid = 0
    %endif

    %assign Idx = GetEtherCATTaskIdx(tid)

    %if Idx != -1
      %% SampleDomain has been registered already
      %return tid
    %endif

    %% No domain exists with this Task Id

    %%
    %% Insert a new Task with this task id
    %%
    %assign TaskIdx = EtherCAT.NumTasks
    %assign EtherCAT.NumTasks = TaskIdx + 1
    %addtorecord EtherCAT Task { ...
          Tid tid ...
          SampleTime Ts ...
          }
    %trace "Added new Task for SampleTime %<Ts> @ %<TaskIdx>"

    %openfile buf

    /* EtherCAT Process for Sample Time [%<Ts>] */
    if (%<LibIsSampleHit(tid)>) {
      ecs_receive(%<tid>);
      #ifdef ASYNC_ECAT
      ecs_send(%<tid>);
      #endif
    }
    %closefile buf
    %<LibSystemOutputCustomCode(system,buf,"execution")>

    %openfile buf

    /* EtherCAT Queue for Sample Time [%<Ts>] */
    #ifndef ASYNC_ECAT
    if (%<LibIsSampleHit(tid)>) {
      ecs_send(%<tid>);
    }
    #endif
    %closefile buf
    %<LibSystemUpdateCustomCode(system,buf,"trailer")>

  %endwith

  %return tid
%endfunction
