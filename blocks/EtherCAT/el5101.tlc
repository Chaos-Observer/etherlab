%implements "el5101" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Incremental Encoder Input 
%% device EL5101
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of an Incremental Encoder Input
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCATTask(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Registering analog input with EtherCAT Driver
   */
  %<RegisterEtherCATSlave(block, "Beckhoff_EL5101_Value", \
      MasterId, SlaveAddr, LibBlockPWork(INC_Word,"","",0))>
  %if StatusOp
    %<RegisterEtherCATSlave(block, "Beckhoff_EL5101_Status", \
        MasterId, SlaveAddr, LibBlockPWork(StatusByte,"","",0))>
  %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   */
  %%
  %if StatusOp
  /* %<Type> Block: %<Name> */
  %assign s0 = LibBlockOutputSignal(1,"","",0)
  %assign u0 = "*(uint8_T *)(%<LibBlockPWork(StatusByte,"","",0)>)"
  %<s0> = %<u0>;  /* Status */
  %endif
  %%
  %assign y0 = LibBlockOutputSignal(0,"","",0)
  %if RawOp
    %assign u0 = "*(uint16_T *)(%<LibBlockPWork(INC_Word,"","",0)>)"
  %else
    %switch Filter
      %case 0
         %% No Filter
         %assign s0 = "*(uint16_T *)(%<LibBlockPWork(INC_Word,"","",0)>)"
        %break
      %case 1
        %% Continuous filter
        %assign s0 = LibBlockContinuousState("","",0)
        %break
      %case 2
        %% Discrete filter
        %assign s0 =  LibBlockDiscreteState("","",0)
        %break
    %endswitch
    %if ScaleOp
      %assign m = "%<LibBlockParameter(FullScale,"","",0)>/65536"
      %assign c = "+ %<LibBlockParameter(Offset,"","",0)>"
    %else
      %assign m = 1.0/65536
      %assign c = ""
    %endif
    %assign u0 = "%<m>*%<s0> %<c>"
  %endif
  %<y0> = %<u0>;  /* Data */
  %return
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a discrete filter
  %if Filter != 2
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Discrete Low Pass Filter
   */
  %%
  %assign d0 = LibBlockDiscreteState("","",0)
  %assign k  = LibBlockParameter(InputWeight,"","",0)
  %%
  %assign u0 = "*(uint16_T*)%<LibBlockPWork(INC_Word,"","",0)>"
  %<d0> = %<k>*%<u0> 
    + (1 - %<k>)*%<d0>;
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a continuous filter
  %if Filter != 1
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Continuous Low Pass Filter
   */
  %%
  %assign y0 = LibBlockContinuousState("","",0)
  %assign d0 = LibBlockContinuousStateDerivative("","",0)
  %assign k  = LibBlockParameter(Omega,"","",0)
  %%
  %assign u0 = "*(uint16_T*)%<LibBlockPWork(INC_Word,"","",0)>"
  %<d0> = %<k>*(%<u0> - %<y0>);
%endfunction
