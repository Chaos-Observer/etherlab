%implements "ec_slave2" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Analog Input Terminal
%% series EL31xx
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of a analog input
%% terminal.
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%% This function checks whether the EtherCAT system has been called once
%% before already, which is demonstrated by the existance of variable 
%% ::EtherCAT. If not, include C-header file for EtherCAT, 
%% and declare a variable where the slave's data structure is placed 
%% by EtherCAT when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %addtorecord block NumInputs  EXISTS( InputPort) ? SIZE( InputPort,0) : 0
  %addtorecord block NumOutputs EXISTS(OutputPort) ? SIZE(OutputPort,0) : 0

  %addtorecord block EtherCATTid InitEtherCATTask(block,system)
  %addtorecord block EtherCATSlaveId CompiledModel.EtherCAT.SlaveCount
  %assign CompiledModel.EtherCAT.SlaveCount = ...
        CompiledModel.EtherCAT.SlaveCount + 1

  %addtorecord block BlockSampleTime LibBlockSampleTime(block)

%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Cache the C variable name that is assigned to this block defining
  %% the PDO Map

  /* %<Type> Block: %<Name> 
   * Registering EtherCAT block %<ProductName> with Driver
   */
  if ((%<ETL.ErrStr> = ecs_reg_slave( \
           %<EtherCATTid>, /* TID */
           /* MasterId, DomainId, SlaveAlias, SlavePosition */
           %<MasterId>, %<DomainId>, %<SlaveAlias>, %<SlavePosition>,
           /* VendorId, ProductCode */
           %<VendorId>, %<ProductCode>,
           /* SdoConfigCount, SdoVar */
           %<GetSdoConfigId()>,
           /* SyncManager Configuration */
           %<GetSyncManagerConfigId(block)>,
           /* Input/Output Configuration */
           %<GetPdoMapId(block)>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> register "
           "failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if !NumOutputs
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> */
  %%
  %foreach port = NumOutputs
    %assign PortWidth = LibBlockOutputSignalWidth(port)
    %if PortWidth == 1
      %assign rollRegions = [0:0]
    %else
      %assign rollRegions = ...
        RollRegions == [] ? [0:%<PortWidth-1>] : RollRegions
    %endif
    %assign RollVars =  GetRollVars(port, 0)
    %%
    %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
        "Roller", RollVars
      %<LibBlockOutputSignal(port,"",lcv,sigIdx)> = \
                %<GetSrc(port,lcv,sigIdx,1)>;
    %endroll
  %endforeach
  %return
  %%
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetRollVars(port, FilterEnvironment)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %createrecord RollVars {}

  %if FilterEnvironment
    %addtorecord RollVars DataPtr "<pwork>/DataPtr"
    %addtorecord RollVars state BlockSampleTime ? "Xd" : "Xc"
    %if !BlockSampleTime
      %addtorecord RollVars dot "xdot"
    %endif
  %else
    %addtorecord RollVars port "y%<port>"
    %if OutputPort[port][8]
      %addtorecord RollVars state BlockSampleTime ? "Xd" : "Xc"
    %else
      %addtorecord RollVars DataPtr "<pwork>/DataPtr"
    %endif
  %endif

  %if OutputPort[port][2]
    %addtorecord RollVars BitOp "<iwork>/BitOp"
  %endif

  %if OutputPDOFullScale[port] && FilterEnvironment
    %if OutputPort[port][4]
      %if OutputPort[port][5] == -1
        %addtorecord RollVars Gain "<param>/%<OutputGainName[port]>"
      %elseif OutputPort[port][4] > 1
        %addtorecord RollVars Gain "<rwork>/NonTuneableParam"
      %endif
    %endif

    %if OutputPort[port][6]
      %if OutputPort[port][7] == -1
        %addtorecord RollVars Offset "<param>/%<OutputOffset[port]>"
      %elseif OutputPort[port][6] > 1
        %addtorecord RollVars Offset "<rwork>/NonTuneableParam"
      %endif
    %endif
  %endif

  %assign field = FIELDNAMES(RollVars)
  %foreach i = SIZE(field,1)
    %assign field[i] = GETFIELD(RollVars, field[i])
  %endforeach

  %return field

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%
  %if BlockSampleTime && FilterCount || NumInputs
    /* %<Type> Block: %<Name> 
     */
  %endif
  %%
  %if BlockSampleTime && FilterCount
    %foreach port = NumOutputs
      %<WriteFilter(block,port)>
    %endforeach
  %endif
  %%
  %if !NumInputs
    %return
  %endif
%return
  %%
  %%
  %foreach port = NumInputs
    %%
    %if !LibBlockInputSignalConnected(port)
      %continue
    %endif
    /* Input port %<port+1> */
    %%
    %assign Raw  = GetIOPortSpec(InputPortSpec, "Raw",   port)
    %assign PDODataTypeId = ...
                GetIOPortSpec(InputPortSpec, "PDODataTypeId",  port)
    %assign PortWidth = LibBlockInputSignalWidth(port)
    %assign MapCount = GetIOPortSpec(InputPortSpec, "MapCount", port)
    %assign VectorInput = PortWidth != MapCount
    %%
    %if Raw
      %%
      %if PortWidth == 1
        %assign rollRegions = [0:0]
      %else
        %assign rollRegions = RollRegions == [] ...
                ? [0:%<PortWidth-1>] : RollRegions
      %endif
      %if Raw & 2
        %assign RollVars = ...
                ["u%<port>", "<iwork>/BitOffset", "<pwork>/DataPtr"]
      %else
        %assign RollVars = VectorInput ...
                ? ["u%<port>"] : ["u%<port>", "<pwork>/DataPtr"]
      %endif
      %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
              "Roller", RollVars
        %%
        %assign PWorkIdx = VectorInput ...
                ? ECatInput[port].MapIdx ...
                : ECatInput[port].MapIdx + sigIdx
        %assign PWorkLcv = ...
                (lcv != "" && PWorkIdx) ? "%<lcv>+%<PWorkIdx>" : lcv
        %%
        %assign src = LibBlockInputSignal(port,"",lcv,sigIdx)
        %assign dst = GetDst(port, PortWidth != MapCount, ...
                PWorkLcv, PWorkIdx, lcv, sigIdx)
        %%
        %if Raw & 2
          %assign ShiftIdx = sigIdx + ECatInput[port].BitIdx
          %assign ShiftLcv = ...
                  (lcv != "" && ShiftIdx) ? "%<lcv>+%<ShiftIdx>" : lcv
          %%
          %assign Shift = LibBlockIWork(BitOffset,"",ShiftLcv,ShiftIdx)
          %assign Mask = GetMask(InputMap[ECatInput[port].MapIdx])
          %%
          %<dst> = (%<dst> & ~(%<Mask><<%<Shift>)) 
                  | (%<src> & %<Mask>)<<%<Shift>; 
        %else
          %<dst> = %<src>;
        %endif
      %endroll
      %%
    %else
      %assign MaxValue = InputPDOFullScale[port] - 1.0
      %assign MinValue = ...
                GetIOPortSpec(InputPortSpec, "PDODataTypeSigned", port) ...
                ? -InputPDOFullScale[port] : 0.0
      { real_T value;

        %if PortWidth == 1
          %assign rollRegions = [0:0]
        %else
          %assign rollRegions = RollRegions == [] ...
                  ? [0:%<PortWidth-1>] : RollRegions
        %endif
        %assign RollVars = VectorInput ...
                ? ["u%<port>", "<param>/%<InputGainName[port]>"] ...
                : ["u%<port>", "<pwork>/DataPtr", ...
                   "<param>/%<InputGainName[port]>"]
        %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
                "Roller", RollVars
          %assign src = LibBlockInputSignal(port,"",lcv,sigIdx)
          %assign PWorkIdx = VectorInput ...
                ? ECatInput[port].MapIdx ...
                : ECatInput[port].MapIdx + sigIdx
          %assign PWorkLcv = ...
                  (lcv != "" && PWorkIdx) ? "%<lcv>+%<PWorkIdx>" : lcv
          %if InputGainName[port] == ""
            value = %<src> * %<InputPDOFullScale[port]>;
          %else
            %assign scale = ...
                LibBlockParameter(%<InputGainName[port]>,"",lcv,sigIdx)
            value = %<src> * %<InputPDOFullScale[port]> / %<scale>;
          %endif
          %assign dst = GetDst(port, PortWidth != MapCount, ...
                PWorkLcv, PWorkIdx, lcv, sigIdx)
          if (value > %<MaxValue>) {
            %<dst> = %<MaxValue>;
          } else if (value < %<MinValue>) {
            %<dst> = %<MinValue>;
          } else {
            %<dst> = value;
          }
        %endroll
      }
    %endif
  %endforeach
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if FilterCount
    /* %<Type> Block: %<Name> 
     * Continuous low pass filter
     */
    %foreach port = NumOutputs
      %<WriteFilter(block,port)>
    %endforeach
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function WriteFilter(block,port) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%
  %if !OutputPort[port][8]
    %return
  %endif
  %%
  %assign PortWidth = LibBlockOutputSignalWidth(port)
  %%
  /* Filtered output port %<port+1> */
  %%
  %if PortWidth == 1
    %assign rollRegions = [0:0]
  %else
    %assign rollRegions = RollRegions == [] ...
            ? [0:%<PortWidth-1>] : RollRegions
  %endif
  %assign RollVars = GetRollVars(port,1)
  %%
  %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
            "Roller", RollVars
    %%
    %assign FilterIdx = sigIdx + OutputPort[port][9]
    %assign FilterLcv = ...
          (lcv != "" && FilterIdx) ? "%<lcv>+%<FilterIdx>" : lcv
    %%
    %assign u0 = GetSrc(port,lcv,sigIdx,0)
    %%
    %if OutputPort[port][10] == -1
      %assign k  = ...
            LibBlockParameter(%<OutputFilterName[port]>,"",lcv,sigIdx)
    %else
      %if OutputPort[port][8] == 1
        %assign gain = RWorkValues[OutputPort[port][10]]
      %else
        %assign RWorkIdx = sigIdx + OutputPort[port][10]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign k = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %%
    %if BlockSampleTime
      %assign d0 = LibBlockDiscreteState("",FilterLcv,FilterIdx)
      %<d0> += %<k> * (%<u0> - %<d0>);
    %else
      %assign y0 = LibBlockContinuousState("",FilterLcv,FilterIdx)
      %assign d0 = ...
            LibBlockContinuousStateDerivative("",FilterLcv,FilterIdx)
      %%
      %% The following is equivalent to:
      %%   <d0> = %<k>*(%<u0>) + (1 - %<k>)*%<d0>;
      %<d0>  = %<k> * (%<u0> - %<y0>);
    %endif
  %endroll
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetDst(port, VectorInput, PWorkLcv, PWorkIdx, lcv, sigIdx)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if VectorInput
    %assign dst = SPRINTF("((%s*)%s)", ...
        ECatInput[port].RTWDType, ...
        LibBlockPWork(DataPtr, "", "", PWorkIdx))
    %assign sigIdx = lcv == "" ? sigIdx : lcv
    %assign dst = "%<dst>[%<sigIdx>]"
  %else
    %assign dst = SPRINTF("*(%s*)(%s)", ...
        ECatInput[port].RTWDType, ...
        LibBlockPWork(DataPtr, "", PWorkLcv, PWorkIdx))
        )
  %endif

  %return dst

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSrc(port,lcv,sigIdx,usefilter)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if usefilter && OutputPort[port][8]
    %assign FilterIdx = sigIdx + OutputPort[port][9]
    %trace FilterIdx %<FilterIdx>
    %assign FilterLcv = ...
          (lcv != "" && FilterIdx) ? "%<lcv>+%<FilterIdx>" : lcv
    %return BlockSampleTime ...
        ?  LibBlockDiscreteState("",FilterLcv,FilterIdx) ...
        :  LibBlockContinuousState("",FilterLcv,FilterIdx)
  %endif

  %assign PWorkIdx = sigIdx + OutputPort[port][0]
  %assign PWorkLcv = ...
        (lcv != "" && PWorkIdx) ? "%<lcv>+%<PWorkIdx>" : lcv

  %assign PdoDType = LibGetDataTypeNameFromId(OutputPort[port][1])
  %assign src = SPRINTF("*(%s*)%s", ...
        PdoDType, LibBlockPWork(DataPtr,"",PWorkLcv,PWorkIdx))

  %if OutputPort[port][2]
    %assign IWorkIdx = sigIdx + OutputPort[port][3]
    %assign IWorkLcv = ...
          (lcv != "" && IWorkIdx) ? "%<lcv>+%<IWorkIdx>" : lcv
    %assign shift = LibBlockIWork(BitOffset,"","",IWorkIdx)
    %assign mask = (1U << OutputPort[port][2]) - 1
    %assign src = "%<src> >> %<shift> & %<mask>"
  %endif

  %if !OutputPDOFullScale[port]
    %return src
  %endif

  %if OutputPort[port][2]
    %assign src = "(%<src>) / %<OutputPDOFullScale[port]>"
  %else
    %assign src = "%<src> / %<OutputPDOFullScale[port]>"
  %endif

  %if OutputPort[port][4]
    %if OutputPort[port][5] == -1
      %assign gain = LibBlockParameter(...
                %<OutputGainName[port]>,"",lcv,sigIdx)
    %else
      %if OutputPort[port][4] == 1
        %assign gain = RWorkValues[OutputPort[port][5]]
      %else
        %assign RWorkIdx = sigIdx + OutputPort[port][5]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign gain = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %assign src = "%<gain> * %<src>"
  %endif

  %if OutputPort[port][6]
    %if OutputPort[port][7] == -1
      %assign offset = LibBlockParameter(...
                %<OutputOffsetName[port]>,"",lcv,sigIdx)
    %else
      %if OutputPort[port][6] == 1
        %assign offset = RWorkValues[OutputPort[port][7]]
      %else
        %assign RWorkIdx = sigIdx + OutputPort[port][7]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign offset = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %assign src = "%<src> + %<offset>"
  %endif

  %return src

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetMask(PortMap)
  %assign PdoInfoIdx = PortMap[0]
  %assign PdoEntryInfoIdx = PdoInfo[PdoInfoIdx][2] + PortMap[1]
  %assign bitlen = PdoEntryInfo[PdoEntryInfoIdx][2]
  %return SPRINTF("0x%x", (1U << bitlen) - 1)
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSdoConfigId()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if !EXISTS(SdoConfig)
    %return "NULL"
  %endif

  %assign SdoVar = "sdo_config_%<EtherCATSlaveId>"

  %openfile buf

  /* SDO Configuration for Block: %<Name> */
  struct sdo_config %<SdoVar>[] = {
    %foreach i = SIZE(SdoConfig,0)
      { \
      %<GetDTypeName(SdoConfig[i][2])>, \
      %<SdoConfig[i][0]>, %<SdoConfig[i][1]>, %<SdoConfig[i][3]> \
      },
    %endforeach
  };
  %closefile buf
  %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
        "Definitions", buf)>

  %return SdoVar

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetPdoMapId(block)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if !EXISTS(InputPdoEntry) && !EXISTS(OutputPdoEntry)
    %return "NULL"
  %endif

  %assign varname = "pdo_map_%<EtherCATSlaveId>"

  %openfile buf

  struct pdo_map %<varname>[] = {
    %if EXISTS(InputPdoEntry)
      %<WritePdoEntries(InputPdoEntry)>
    %endif
    %if EXISTS(OutputPdoEntry)
      %<WritePdoEntries(OutputPdoEntry)>
    %endif
  };
  %closefile buf
  %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
        "Definitions", buf)>
  %return varname
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function WritePdoEntries(PdoEntry) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %foreach i = SIZE(PdoEntry,0)
    %<SPRINTF("{ 0x%04X, %u, %u, %s, &%s, %s}, ", ...
            PdoEntry[i][0], ...
            PdoEntry[i][1], ...
            PdoEntry[i][2], ...
            GetDTypeName(PdoEntry[i][3]), ...
            LibBlockPWork(DataPtr,"","",PdoEntry[i][4]), ...
            (PdoEntry[i][5] == -1 ...
                    ? "NULL" ...
                    : "&%<LibBlockIWork(BitOffset,"","", ...
                                        PdoEntry[i][4])>")...
            )>
  %endforeach
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSyncManagerConfigId(block)
%% 
%% This function is used to define variables that are required to specify
%% the pdo mapping of an EtherCAT slave. The string that is returned
%% is the variable name that should be used when calling 
%% ecrt_slave_config_pdos()
%% This function depends on the following global Parameters:
%%   ProductName     string  Common name of the slave
%%   VendorId        int     Vendor Identification number
%%   ProductCode     int     Product Code of the slave
%%   ConfigLayout    int     Layout of slave memory - SDO, PDO, etc
%%   PdoInfo        This is a vector of integers organised in groups of 4:
%%                   entry0:    1 = Input; 0 = Output
%%                   entry1:    Index of PDO to map
%%                   entry2:    Group index of PdoEntryInfo
%%                   entry3:    Number of PdoEntryInfo groups
%%   PdoEntryInfo  This is a vector of integers organised in groups of 3:
%%                   entry0:    Index of the PDO
%%                   entry1:    Subindex of the PDO
%%                   entry2:    PDO bit length
%%
%% A typical value for PdoEntryInfo is:
%%      [[ 0x3101, 1,  8 ],   <- Group 0
%%       [ 0x3101, 2, 16 ],   <- Group 1
%%       [ 0x3102, 1,  8 ],   <- Group 2
%%       [ 0x3102, 2, 16 ]]   <- Group 3
%% describing the PDO entry information for the el31xx series. Here
%% are 4 groups of 3 values.
%%
%% A typical value for PdoInfo is:
%%     [[ 1,       <- Input
%%        0x1A00,  <- Pdo Index to map
%%        0,       <- starting with group[0] of PdoEntryInfo
%%        2     ], <- going on for 2 groups (i.e. group[0] and group[1])
%%
%%      [ 1, 0x1A01 2, 2 ]] <- Second group entry of PdoInfo, mapping 0x1A01
%%                             to group[2] and group[3] of PdoEntryInfo
%%                             (indices [6..11])
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %assign suffix = ...
        SPRINTF("%x_0x%08x_%u", VendorId, ProductCode, LayoutVersion)
  %assign varName = "sync_manager_%<suffix>"
  %if ISFIELD(CompiledModel.EtherCAT.PDOMap,varName)
    %return GETFIELD(CompiledModel.EtherCAT.PDOMap, varName)
  %endif

  %if !EXISTS(PdoEntryInfo)
    %assign PdoEntryInfoId = ""
  %else
    %assign PdoEntryInfoId = "pdo_entry_info_%<suffix>"

    %openfile buf
    /* SyncManager configuration for %<ProductName>
     * with configuration layout %<LayoutVersion>
     */
    ec_pdo_entry_info_t %<PdoEntryInfoId>[] = {
      %%
      %foreach i = SIZE(PdoEntryInfo,0)
        %<SPRINTF("{ 0x%04X, %u, %u }, /* %u */", PdoEntryInfo[i][0], ...
            PdoEntryInfo[i][1], PdoEntryInfo[i][2], i)>
      %endforeach
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %if !EXISTS(PdoInfo)
    %assign PdoInfoId = ""
  %else
    %assign PdoInfoId = "pdo_info_%<suffix>"
    
    %openfile buf
    ec_pdo_info_t %<PdoInfoId>[] = {
      %assign PdoEntryInfoIdx = 0
      %foreach i = SIZE(PdoInfo,0)
        %% The value 0 or 1 indicates a simulink block output or input
        %% respectively. This in turn maps to EC_DIR_INPUT and EC_DIR_OUTPUT
        %% as far as the EtherCAT master is concerned.
        %% i.e. 0 -> block output -> EC_DIR_INPUT  -> Slave TxPDO
        %%      1 -> block input  -> EC_DIR_OUTPUT -> Slave RxPDO
        %%                                                       
        %%              Simulink Block                         
        %%              +-------------------------------+
        %%              |         EtherCAT Master       |       
        %%              |                               |       
        %%              |          +---------+          |       
        %% PdoInfo[][0] |   EC_DIR |Slave    | EC_DIR   | PdoInfo[][0]
        %%          = 1 |   OUTPUT |         | INPUT    | = 0      
        %%         ----->----------> Rx   Tx >---------->-----  
        %%              |          |   PDO   |          |      
        %%              |          |         |          |      
        %%              |          +---------+          |      
        %%              | output domain                 |      
        %%              |                  input domain |      
        %%              +-------------------------------+      
        %%
        %<SPRINTF("{ 0x%04X, %u, %s },", ...
                PdoInfo[i][0], ...
                PdoInfo[i][1], ...
                PdoEntryInfoId == "" ...
                        ? "NULL" ...
                        : "&%<PdoEntryInfoId>[%<PdoEntryInfoIdx>]")>
        %if PdoEntryInfoId != ""
          %assign PdoEntryInfoIdx = PdoEntryInfoIdx + PdoInfo[i][1]
        %endif
      %endforeach
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %if !EXISTS(SyncManager)
    %addtorecord CompiledModel.EtherCAT.PDOMap %<varName> "NULL"
  %else
    %addtorecord CompiledModel.EtherCAT.PDOMap %<varName> varName

    %assign PdoInfoIdx = 0

    %openfile buf
    ec_sync_info_t %<varName>[] = {
    %foreach i = SIZE(SyncManager,0)
      { %<SyncManager[i][0]>, \
        %<SyncManager[i][1] == 1 ? "EC_DIR_INPUT" : "EC_DIR_OUTPUT">, \
        %if PdoInfoId == ""
          0, NULL \
        %else
          %<SyncManager[i][2]>, &%<PdoInfoId>[%<PdoInfoIdx>] \
          %assign PdoInfoIdx = PdoInfoIdx + SyncManager[i][2]
        %endif
      },
    %endforeach
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %return GETFIELD(CompiledModel.EtherCAT.PDOMap, varName)
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetIOPortSpec( Spec, Entry, Port ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %switch Entry
    %case "PDODataTypeId"
      %return Spec[Port][0] == tSS_BOOLEAN ? tSS_UINT8 : Spec[Port][0]
    %case "PDODataTypeName"
      %return GetDTypeName(Spec[Port][0])
    %case "PDODataTypeSigned"
      %return GetDTypeSigned(Spec[Port][0])
    %case "Raw"
      %return Spec[Port][1]
    %case "MapCount"
      %return Spec[Port][2]
    %case "Gain"
      %return Spec[Port][3]
    %case "Offset"
      %return Spec[Port][4]
    %case "Filter"
      %return Spec[Port][5]
    %default
      %error Unknown request %<Entry> for GetIOPortSpec()
  %endswitch

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetDTypeSigned( dtype ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %switch dtype
    %case tSS_BOOLEAN
    %case tSS_UINT8
    %case tSS_UINT16
    %case tSS_UINT32
      %return 0

    %case tSS_INT8
    %case tSS_INT16
    %case tSS_INT32
      %return 1

    %default
      %error Unknown PDODataType: %<dtype>
  %endswitch
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetDTypeName( dtype ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %switch dtype
    %case tSS_BOOLEAN
      %return "si_boolean_T"
    %case tSS_UINT8
      %return "si_uint8_T"
    %case tSS_INT8
      %return "si_sint8_T"
    %case tSS_UINT16
      %return "si_uint16_T"
    %case tSS_INT16
      %return "si_sint16_T"
    %case tSS_UINT32
      %return "si_uint32_T"
    %case tSS_INT32
      %return "si_sint32_T"
    %default
      %error Unknown PDODataType: %<dtype>; Known types: ...
                %<tSS_UINT8> %<tSS_INT8> %<tSS_UINT16> %<tSS_INT16> ...
                %<tSS_UINT32> %<tSS_INT32> %<tSS_BOOLEAN>
  %endswitch
%endfunction
