%implements "ec_slave2" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Analog Input Terminal
%% series EL31xx
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of a analog input
%% terminal.
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%% This function checks whether the EtherCAT system has been called once
%% before already, which is demonstrated by the existance of variable 
%% ::EtherCAT. If not, include C-header file for EtherCAT, 
%% and declare a variable where the slave's data structure is placed 
%% by EtherCAT when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>

  %% General assignments of array indices that form the basis for
  %% the S-Function <-> TLC communication
  %% DO NOT CHANGE THESE without updating the S-Function ec_test2.c
  %% as well
  %assign ::PortSpecDir                 = 0
  %assign ::PortSpecPortIdx             = 1
  %assign ::PortSpecPWork               = 2
  %assign ::PortSpecDType               = 3
  %assign ::PortSpecBitLen              = 4
  %assign ::PortSpecIWork               = 5
  %assign ::PortSpecGainCount           = 6
  %assign ::PortSpecGainRWorkIdx        = 7
  %assign ::PortSpecOffsetCount         = 8
  %assign ::PortSpecOffsetRWorkIdx      = 9
  %assign ::PortSpecFilterCount         = 10
  %assign ::PortSpecFilterIdx           = 11
  %assign ::PortSpecFilterRWorkIdx      = 12

  %assign ::PdoEntryIndex               = 0
  %assign ::PdoEntrySubIndex            = 1
  %assign ::PdoEntryLength              = 2
  %assign ::PdoEntryDir                 = 3
  %assign ::PdoEntryDType               = 4
  %assign ::PdoEntryBitLen              = 5
  %assign ::PdoEntryPWork               = 6
  %assign ::PdoEntryIWork               = 7

  %assign ::SdoConfigIndex              = 0
  %assign ::SdoConfigSubIndex           = 1
  %assign ::SdoConfigDataType           = 2
  %assign ::SdoConfigValue              = 3

  %assign ::PdoEI_Index                 = 0
  %assign ::PdoEI_SubIndex              = 1
  %assign ::PdoEI_BitLen                = 2

  %assign ::PdoInfo_PdoIndex            = 0
  %assign ::PdoInfo_PdoEntryCount       = 1

  %assign ::SM_Index                    = 0
  %assign ::SM_Direction                = 1
  %assign ::SM_PdoCount                 = 2

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %addtorecord block EtherCATTid InitEtherCATTask(block,system)

  %addtorecord block EtherCATSlaveId GetEtherCATId()

  %addtorecord block BlockSampleTime LibBlockSampleTime(block)

  %assign rv1 = GetRollVars1(5)
%%assign rv2 = GetRollVars2(5)

%%trace XXXXXXXXXXXXX %<rv1> %<rv2>

%endfunction

%function GetRollVars1(count)
  %assign rollVars = []
  %foreach i = count
    %openfile tmpBuf
    "y%<i+1>"\
    %closefile tmpBuf
    %assign rollVars = rollVars + tmpBuf
  %endforeach
  %return rollVars
%endfunction


%function GetRollVars2(count)
  %assign comma = ""
  %openfile tmpBuf
  %foreach i = count
    %<comma>"y%<i+1>"\
    %assign comma = ","
  %endforeach
  %closefile tmpBuf
  %return "["+tmpBuf+"]"
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Cache the C variable name that is assigned to this block defining
  %% the PDO Map
  %assign SdoConfiguration = GetSdoConfig()
  %assign PdoMap = GetPdoMap(block)

  /* %<Type> Block: %<Name> 
   * Registering EtherCAT block %<ProductName> with Driver
   */
  if ((%<ETL.ErrStr> = ecs_reg_slave( \
           %<EtherCATTid>, /* TID */
           /* MasterId, DomainId, SlaveAlias, SlavePosition */
           %<MasterId>, %<DomainId>, %<SlaveAlias>, %<SlavePosition>,
           /* VendorId, ProductCode */
           %<VendorId>, %<ProductCode>,
           /* SdoConfigCount, SdoVar */
           %<SdoConfiguration.count>, %<SdoConfiguration.id>,
           /* SyncManager Configuration */
           %<GetSyncManagerConfigId(block)>,
           /* Input/Output Configuration */
           %<PdoMap.count>, %<PdoMap.id>))) {
        snprintf(%<ETL.ErrMsg>, sizeof(%<ETL.ErrMsg>), 
           "EtherCAT slave %<LibGetFormattedBlockPath(block)> register "
           "failed: %s", %<ETL.ErrStr>);
        %<LibSetRTModelErrorStatus( "%<ETL.ErrMsg>")>;
        return;
  }
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if !NumOutputs
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> */
  %%
  %foreach idx = SIZE(IOPortSpec,0)
    %%
    %if IOPortSpec[idx][PortSpecDir] != 0
      %continue
    %endif
    %%
    %assign port = IOPortSpec[idx][PortSpecPortIdx]
    %%
    /* Output Port %<port+1> */
    %assign PortWidth = LibBlockOutputSignalWidth(port)
    %if PortWidth == 1
      %assign rollRegions = [0:0]
    %else
      %assign rollRegions = ...
        RollRegions == [] ? [0:%<PortWidth-1>] : RollRegions
    %endif
    %%
    %assign RollVars =  GetRollVars(idx,0)
    %%
    %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
        "Roller", RollVars
      %<LibBlockOutputSignal(port,"",lcv,sigIdx)> = \
                %<GetSrc(idx,lcv,sigIdx,1)>;
    %endroll
  %endforeach
  %return
  %%
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetRollVars(idx, FilterEnvironment)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %createrecord RollVars {}
  %assign port = IOPortSpec[idx][PortSpecPortIdx]

  %if IOPortSpec[idx][PortSpecDir]
    %addtorecord RollVars port "u%<port>"
    %addtorecord RollVars DataPtr "<pwork>/DataPtr"
  %else
    %if FilterEnvironment
      %addtorecord RollVars DataPtr "<pwork>/DataPtr"
      %addtorecord RollVars state BlockSampleTime ? "Xd" : "Xc"
      %if !BlockSampleTime
        %addtorecord RollVars dot "xdot"
      %endif
    %else
      %addtorecord RollVars port "y%<port>"
      %if IOPortSpec[idx][PortSpecFilterCount]
        %addtorecord RollVars state BlockSampleTime ? "Xd" : "Xc"
      %else
        %addtorecord RollVars DataPtr "<pwork>/DataPtr"
      %endif
    %endif
  %endif

  %if IOPortSpec[idx][PortSpecBitLen]
    %addtorecord RollVars BitOffset "<iwork>/BitOffset"
  %endif

  %if PDOFullScale[idx] && FilterEnvironment
    %if IOPortSpec[idx][PortSpecGainCount]
      %if IOPortSpec[idx][PortSpecGainRWorkIdx] == -1
        %addtorecord RollVars Gain "<param>/%<GainName[idx]>"
      %elseif IOPortSpec[idx][PortSpecGainCount] > 1
        %addtorecord RollVars Gain "<rwork>/NonTuneableParam"
      %endif
    %endif

    %if !IOPortSpec[idx][PortSpecDir] && IOPortSpec[idx][PortSpecOffsetCount]
      %if IOPortSpec[idx][PortSpecOffsetRWorkIdx] == -1
        %addtorecord RollVars Offset "<param>/%<OffsetName[idx]>"
      %elseif IOPortSpec[idx][PortSpecOffsetCount] > 1
        %addtorecord RollVars Offset "<rwork>/NonTuneableParam"
      %endif
    %endif
  %endif

  %assign field = FIELDNAMES(RollVars)
  %foreach i = SIZE(field,1)
    %assign field[i] = GETFIELD(RollVars, field[i])
  %endforeach

  %return field

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%
  %if BlockSampleTime && FilterCount || NumInputs
    /* %<Type> Block: %<Name> 
     */
  %endif
  %%
  %if BlockSampleTime && FilterCount
    %foreach idx = SIZE(IOPortSpec,0)
      %%
      %if IOPortSpec[idx][PortSpecDir] != 0
        %continue
      %endif
      %%
      %<WriteFilter(block,idx)>
    %endforeach
  %endif
  %%
  %if !NumInputs
    %return
  %endif
  %%
  %%
  %foreach idx = SIZE(IOPortSpec,0)
    %%
    %if !IOPortSpec[idx][PortSpecDir]
      %continue
    %endif
    %%
    %assign port = IOPortSpec[idx][PortSpecPortIdx]
    %%
    %if !LibBlockInputSignalConnected(port)
      /* Input port %<port+1> is not connected */
      %continue
    %endif
    /* Input port %<port+1> */
    %%
    %assign PortWidth = LibBlockInputSignalWidth(port)
    %%
    %assign RollVars = GetRollVars(idx,0)
    %if PortWidth == 1
      %assign rollRegions = [0:0]
    %else
      %assign rollRegions = RollRegions == [] ...
              ? [0:%<PortWidth-1>] : RollRegions
    %endif
    %%
    %%
    %if PDOFullScale[idx]
      %assign max = PDOFullScale[idx] - 1.0
      %assign min = GetDTypeSigned(IOPortSpec[idx][PortSpecDType]) ...
                ? -PDOFullScale[idx] : 0.0
      %%
      { real_T value = 0.0;
      %%
      %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
              "Roller", RollVars
        %%
        %assign dst = GetDst(idx,lcv,sigIdx)
        %assign PdoDType = ...
                LibGetDataTypeNameFromId(IOPortSpec[idx][PortSpecDType])
        %%

        value = %<GetInputValue(idx,lcv,sigIdx)>;
        value = \
        %<SPRINTF("value > %.1f ? %.1f : (value < %.1f ? %.1f : value);",...
                max, max, min, min)>
        %%value = value > %<max> ? %<max> : (value < %<min> ? %<min> : value);
        %<dst> = %<GetRHS(idx,"(%<PdoDType>)value",dst,lcv,sigIdx)>;
      %endroll
      }
    %else
      %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
              "Roller", RollVars
        %%
        %assign dst = GetDst(idx,lcv,sigIdx)
        %assign src = LibBlockInputSignal(port,"",lcv,sigIdx)
        %<dst> = %<GetRHS(idx,src,dst,lcv,sigIdx)>;
      %endroll
    %endif
  %endforeach
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetDTypeSigned( dtype ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %switch dtype
    %case tSS_BOOLEAN
    %case tSS_UINT8
    %case tSS_UINT16
    %case tSS_UINT32
      %return 0

    %case tSS_INT8
    %case tSS_INT16
    %case tSS_INT32
      %return 1

    %default
      %error Unknown PDODataType: %<dtype>
  %endswitch
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if FilterCount
    /* %<Type> Block: %<Name> 
     * Continuous low pass filter
     */
    %foreach idx = SIZE(IOPortSpec,0)
      %%
      %if IOPortSpec[idx][PortSpecDir] != 0
        %continue
      %endif
      %%
      %<WriteFilter(block,idx)>
    %endforeach
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function WriteFilter(block,idx) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign port = IOPortSpec[idx][PortSpecPortIdx]
  %%
  %if !IOPortSpec[idx][PortSpecFilterCount]
    %return
  %endif
  %%
  %assign PortWidth = LibBlockOutputSignalWidth(port)
  %%
  /* Filtered output port %<port+1> */
  %%
  %if PortWidth == 1
    %assign rollRegions = [0:0]
  %else
    %assign rollRegions = RollRegions == [] ...
            ? [0:%<PortWidth-1>] : RollRegions
  %endif
  %assign RollVars = GetRollVars(idx,1)
  %%
  %roll sigIdx = rollRegions, lcv = RollThreshold, block, ...
            "Roller", RollVars
    %%
    %assign FilterIdx = sigIdx + IOPortSpec[idx][PortSpecFilterIdx]
    %assign FilterLcv = ...
          (lcv != "" && FilterIdx) ? "%<lcv>+%<FilterIdx>" : lcv
    %%
    %assign u0 = GetSrc(idx,lcv,sigIdx,0)
    %%
    %if IOPortSpec[idx][PortSpecFilterRWorkIdx] == -1
      %assign k  = ...
            LibBlockParameter(%<FilterName[idx]>,"",lcv,sigIdx)
    %else
      %if IOPortSpec[idx][PortSpecFilterCount] == 1
        %assign gain = RWorkValues[IOPortSpec[idx][PortSpecFilterRWorkIdx]]
      %else
        %assign RWorkIdx = sigIdx + IOPortSpec[idx][PortSpecFilterRWorkIdx]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign k = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %%
    %if BlockSampleTime
      %assign d0 = LibBlockDiscreteState("",FilterLcv,FilterIdx)
      %<d0> += %<k> * (%<u0> - %<d0>);
    %else
      %assign y0 = LibBlockContinuousState("",FilterLcv,FilterIdx)
      %assign d0 = ...
            LibBlockContinuousStateDerivative("",FilterLcv,FilterIdx)
      %%
      %% The following is equivalent to:
      %%   <d0> = %<k>*(%<u0>) + (1 - %<k>)*%<d0>;
      %<d0>  = %<k> * (%<u0> - %<y0>);
    %endif
  %endroll
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetDst(idx,lcv,sigIdx)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %assign PWorkIdx = sigIdx + IOPortSpec[idx][PortSpecPWork]
  %assign PWorkLcv = ...
        (lcv != "" && PWorkIdx) ? "%<lcv>+%<PWorkIdx>" : lcv

  %assign PdoDType = LibGetDataTypeNameFromId(IOPortSpec[idx][PortSpecDType])
  %assign dst = SPRINTF("*(%s*)%s", ...
        PdoDType, LibBlockPWork(DataPtr,"",PWorkLcv,PWorkIdx))

  %return dst

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetRHS(idx,src,dst,lcv,sigIdx)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


  %if IOPortSpec[idx][PortSpecBitLen]
    %assign IWorkIdx = sigIdx + IOPortSpec[idx][PortSpecIWork]
    %assign IWorkLcv = ...
          (lcv != "" && IWorkIdx) ? "%<lcv>+%<IWorkIdx>" : lcv
    %assign shift = LibBlockIWork(BitOffset,"",IWorkLcv,IWorkIdx)
    %assign mask = (1U << IOPortSpec[idx][PortSpecBitLen]) - 1
    %return "(%<dst> & ~(%<mask><<%<shift>)) \
        | (%<src> & %<mask>)<<%<shift>"
  %else
    %return src
  %endif

  %return rhs

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetInputValue(idx,lcv,sigIdx)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign port = IOPortSpec[idx][PortSpecPortIdx]

  %assign src = LibBlockInputSignal(port,"",lcv,sigIdx)

  %if IOPortSpec[idx][PortSpecGainCount]
    %if IOPortSpec[idx][PortSpecGainRWorkIdx] == -1
      %assign gain = LibBlockParameter(...
                %<GainName[idx]>,"",lcv,sigIdx)
    %else
      %if IOPortSpec[idx][PortSpecGainCount] == 1
        %assign gain = RWorkValues[IOPortSpec[idx][PortSpecGainRWorkIdx]]
      %else
        %assign RWorkIdx = sigIdx + IOPortSpec[idx][PortSpecGainRWorkIdx]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign gain = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %assign src = "%<gain> * %<src>"
  %endif

  %if PDOFullScale[idx]
    %assign src = SPRINTF("%.1f * %s", PDOFullScale[idx], src)
  %endif

  %return src

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSrc(idx,lcv,sigIdx,usefilter)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if usefilter && IOPortSpec[idx][PortSpecFilterCount]
    %assign FilterIdx = sigIdx + IOPortSpec[idx][PortSpecFilterIdx]
    %trace FilterIdx %<FilterIdx>
    %assign FilterLcv = ...
          (lcv != "" && FilterIdx) ? "%<lcv>+%<FilterIdx>" : lcv
    %return BlockSampleTime ...
        ?  LibBlockDiscreteState("",FilterLcv,FilterIdx) ...
        :  LibBlockContinuousState("",FilterLcv,FilterIdx)
  %endif

  %assign PWorkIdx = sigIdx + IOPortSpec[idx][PortSpecPWork]
  %assign PWorkLcv = ...
        (lcv != "" && PWorkIdx) ? "%<lcv>+%<PWorkIdx>" : lcv

  %assign PdoDType = LibGetDataTypeNameFromId(IOPortSpec[idx][PortSpecDType])
  %assign src = SPRINTF("*(%s*)%s", ...
        PdoDType, LibBlockPWork(DataPtr,"",PWorkLcv,PWorkIdx))

  %if IOPortSpec[idx][PortSpecBitLen]
    %assign IWorkIdx = sigIdx + IOPortSpec[idx][PortSpecIWork]
    %assign IWorkLcv = ...
          (lcv != "" && IWorkIdx) ? "%<lcv>+%<IWorkIdx>" : lcv
    %assign shift = LibBlockIWork(BitOffset,"",IWorkLcv,IWorkIdx)
    %assign mask = (1U << IOPortSpec[idx][PortSpecBitLen]) - 1
    %assign src = "%<src> >> %<shift> & %<mask>"
  %endif

  %if !PDOFullScale[idx]
    %return src
  %endif

  %assign fs = SPRINTF("%.1f", PDOFullScale[idx])

  %if IOPortSpec[idx][PortSpecBitLen]
    %assign src = "(%<src>) / %<fs>"
  %else
    %assign src = "%<src> / %<fs>"
  %endif

  %if IOPortSpec[idx][PortSpecGainCount]
    %if IOPortSpec[idx][PortSpecGainRWorkIdx] == -1
      %assign gain = LibBlockParameter(...
                %<GainName[idx]>,"",lcv,sigIdx)
    %else
      %if IOPortSpec[idx][PortSpecGainCount] == 1
        %assign gain = RWorkValues[IOPortSpec[idx][PortSpecGainRWorkIdx]]
      %else
        %assign RWorkIdx = sigIdx + IOPortSpec[idx][PortSpecGainRWorkIdx]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign gain = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %assign src = "%<gain> * %<src>"
  %endif

  %if IOPortSpec[idx][PortSpecOffsetCount]
    %if IOPortSpec[idx][PortSpecOffsetRWorkIdx] == -1
      %assign offset = LibBlockParameter(...
                %<OffsetName[idx]>,"",lcv,sigIdx)
    %else
      %if IOPortSpec[idx][PortSpecOffsetCount] == 1
        %assign offset = RWorkValues[IOPortSpec[idx][PortSpecOffsetRWorkIdx]]
      %else
        %assign RWorkIdx = sigIdx + IOPortSpec[idx][PortSpecOffsetRWorkIdx]
        %assign RWorkLcv = ...
              (lcv != "" && RWorkIdx) ? "%<lcv>+%<RWorkIdx>" : lcv
        %assign offset = LibBlockRWork(NonTuneableParam,"",RWorkLcv,RWorkIdx)
      %endif
    %endif
    %assign src = "%<src> + %<offset>"
  %endif

  %return src

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSdoConfig()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %createrecord sdo_config { count 0 id "NULL" }
  %if !EXISTS(SdoConfig)
    %return sdo_config
  %endif

  %assign sdo_config.count = SIZE(SdoConfig,0)
  %assign sdo_config.id = "sdo_config_%<EtherCATSlaveId>"

  %openfile buf

  /* SDO Configuration for Block: %<Name> */
  struct sdo_config %<sdo_config.id>[] = {
    %foreach i = sdo_config.count
      { \
      %<GetEtlDTypeName(SdoConfig[i][SdoConfigDataType])>, \
      %<SdoConfig[i][SdoConfigIndex]>, \
      %<SdoConfig[i][SdoConfigSubIndex]>, \
      %<SdoConfig[i][SdoConfigValue]> \
      },
    %endforeach
  };
  %closefile buf
  %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
        "Definitions", buf)>

  %return sdo_config

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetPdoMap(block)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %createrecord pdo_map {count 0 id "NULL"}

  %if !EXISTS(MappedPdoEntry)
    %return pdo_map
  %endif

  %assign pdo_map.id = "pdo_map_%<EtherCATSlaveId>"

  %assign pdo_map.count = SIZE(MappedPdoEntry,0)

  %openfile buf

  /* %<Type> Block: %<Name> 
   * Mapped Pdos for block %<ProductName>
   */
  struct pdo_map %<pdo_map.id>[] = {
    %foreach i = pdo_map.count
      %assign IWorkAddr = MappedPdoEntry[i][PdoEntryIWork] == -1 ...
                ? "NULL" ...
                : "&%<LibBlockIWork(BitOffset,"","",...
                        MappedPdoEntry[i][PdoEntryIWork])>"
      %%
      %% Note: Block inputs are OUTPUTS as seen by the EtherCAT Master
      %assign dir = ...
        MappedPdoEntry[i][PdoEntryDir] ? "EC_DIR_OUTPUT" : "EC_DIR_INPUT"
      %%
      %<SPRINTF("{ 0x%04X, %u, %u, %s, %s, %u, &%s, %s}, ", ...
              MappedPdoEntry[i][PdoEntryIndex], ...
              MappedPdoEntry[i][PdoEntrySubIndex], ...
              MappedPdoEntry[i][PdoEntryLength], ...
              dir, ...
              GetEtlDTypeName(MappedPdoEntry[i][PdoEntryDType]), ...
              MappedPdoEntry[i][PdoEntryBitLen], ...
              LibBlockPWork(DataPtr,"","",...
                MappedPdoEntry[i][PdoEntryPWork]), ...
              IWorkAddr)>
    %endforeach
  };
  %closefile buf
  %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
        "Definitions", buf)>
  %return pdo_map
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetSyncManagerConfigId(block)
%% 
%% This function is used to define variables that are required to specify
%% the pdo mapping of an EtherCAT slave. The string that is returned
%% is the variable name that should be used when calling 
%% ecrt_slave_config_pdos()
%% This function depends on the following global Parameters:
%%   ProductName     string  Common name of the slave
%%   VendorId        int     Vendor Identification number
%%   ProductCode     int     Product Code of the slave
%%   ConfigLayout    int     Layout of slave memory - SDO, PDO, etc
%%   PdoInfo        This is a vector of integers organised in groups of 4:
%%                   entry0:    1 = Input; 0 = Output
%%                   entry1:    Index of PDO to map
%%                   entry2:    Group index of PdoEntryInfo
%%                   entry3:    Number of PdoEntryInfo groups
%%   PdoEntryInfo  This is a vector of integers organised in groups of 3:
%%                   entry0:    Index of the PDO
%%                   entry1:    Subindex of the PDO
%%                   entry2:    PDO bit length
%%
%% A typical value for PdoEntryInfo is:
%%      [[ 0x3101, 1,  8 ],   <- Group 0
%%       [ 0x3101, 2, 16 ],   <- Group 1
%%       [ 0x3102, 1,  8 ],   <- Group 2
%%       [ 0x3102, 2, 16 ]]   <- Group 3
%% describing the PDO entry information for the el31xx series. Here
%% are 4 groups of 3 values.
%%
%% A typical value for PdoInfo is:
%%     [[ 1,       <- Input
%%        0x1A00,  <- Pdo Index to map
%%        0,       <- starting with group[0] of PdoEntryInfo
%%        2     ], <- going on for 2 groups (i.e. group[0] and group[1])
%%
%%      [ 1, 0x1A01 2, 2 ]] <- Second group entry of PdoInfo, mapping 0x1A01
%%                             to group[2] and group[3] of PdoEntryInfo
%%                             (indices [6..11])
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if UniqueConfig
    %assign suffix = EtherCATSlaveId
  %else
    %assign suffix = SPRINTF("%x_%08x_%08x_%u", ...
                  VendorId, ProductCode, RevisionNo, LayoutVersion)
  %endif

  %assign varName = "sync_manager_%<suffix>"
  %if ISFIELD(CompiledModel.EtherCAT.PDOMap,varName)
    %return GETFIELD(CompiledModel.EtherCAT.PDOMap, varName)
  %endif

  %if !EXISTS(PdoEntryInfo)
    %assign PdoEntryInfoId = ""
  %else
    %assign PdoEntryInfoId = "pdo_entry_info_%<suffix>"

    %openfile buf

    /* PDO configuration for %<ProductName>
     * with configuration layout %<LayoutVersion>
     */
    ec_pdo_entry_info_t %<PdoEntryInfoId>[] = {
      %%
      %foreach idx = SIZE(PdoEntryInfo,0)
        %<SPRINTF("{ 0x%04X, %u, %u }, /* %u */", ...
                PdoEntryInfo[idx][PdoEI_Index], ...
                PdoEntryInfo[idx][PdoEI_SubIndex], ...
                PdoEntryInfo[idx][PdoEI_BitLen], ...
                idx )>
      %endforeach
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %if !EXISTS(PdoInfo)
    %assign PdoInfoId = ""
  %else
    %assign PdoInfoId = "pdo_info_%<suffix>"
    
    %openfile buf
    ec_pdo_info_t %<PdoInfoId>[] = {
      %assign PdoEntryInfoIdx = 0
      %foreach i = SIZE(PdoInfo,0)
        %% The value 0 or 1 indicates a simulink block output or input
        %% respectively. This in turn maps to EC_DIR_INPUT and EC_DIR_OUTPUT
        %% as far as the EtherCAT master is concerned.
        %% i.e. 0 -> block output -> EC_DIR_INPUT  -> Slave TxPDO
        %%      1 -> block input  -> EC_DIR_OUTPUT -> Slave RxPDO
        %%                                                       
        %%              Simulink Block                         
        %%              +-------------------------------+
        %%              |         EtherCAT Master       |       
        %%              |                               |       
        %%              |          +---------+          |       
        %% PdoInfo[][0] |   EC_DIR |Slave    | EC_DIR   | PdoInfo[][0]
        %%          = 1 |   OUTPUT |         | INPUT    | = 0      
        %%         ----->----------> Rx   Tx >---------->-----  
        %%              |          |   PDO   |          |      
        %%              |          |         |          |      
        %%              |          +---------+          |      
        %%              | output domain                 |      
        %%              |                  input domain |      
        %%              +-------------------------------+      
        %%
        %<SPRINTF("{ 0x%04X, %u, %s },", ...
                PdoInfo[i][PdoInfo_PdoIndex], ...
                PdoInfo[i][PdoInfo_PdoEntryCount], ...
                PdoEntryInfoId == "" ...
                        ? "NULL" ...
                        : "&%<PdoEntryInfoId>[%<PdoEntryInfoIdx>]")>
        %if PdoEntryInfoId != ""
          %assign PdoEntryInfoIdx = PdoEntryInfoIdx + PdoInfo[i][1]
        %endif
      %endforeach
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %if !EXISTS(SyncManager)
    %addtorecord CompiledModel.EtherCAT.PDOMap %<varName> "NULL"
  %else
    %addtorecord CompiledModel.EtherCAT.PDOMap %<varName> varName

    %assign PdoInfoIdx = 0

    %openfile buf
    ec_sync_info_t %<varName>[] = {
    %foreach i = SIZE(SyncManager,0)
      { %<SyncManager[i][SM_Index]>, \
        %<SyncManager[i][SM_Direction] == 1 ...
                ? "EC_DIR_INPUT" : "EC_DIR_OUTPUT">, \
        %if PdoInfoId == ""
          0, NULL \
        %else
          %<SyncManager[i][SM_PdoCount]>, &%<PdoInfoId>[%<PdoInfoIdx>] \
          %assign PdoInfoIdx = PdoInfoIdx + SyncManager[i][SM_PdoCount]
        %endif
      },
    %endforeach
      { (uint8_T)EC_END, },
    };
    %closefile buf
    %<LibSetSourceFileSection(CompiledModel.EtherCAT.model_c, \
          "Definitions", buf)>
  %endif

  %return GETFIELD(CompiledModel.EtherCAT.PDOMap, varName)
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function GetEtlDTypeName( dtype ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %switch dtype
    %case tSS_BOOLEAN
      %return "si_boolean_T"
    %case tSS_UINT8
      %return "si_uint8_T"
    %case tSS_INT8
      %return "si_sint8_T"
    %case tSS_UINT16
      %return "si_uint16_T"
    %case tSS_INT16
      %return "si_sint16_T"
    %case tSS_UINT32
      %return "si_uint32_T"
    %case tSS_INT32
      %return "si_sint32_T"
    %default
      %error Unknown PDODataType: %<dtype>; Known types: ...
                %<tSS_UINT8> %<tSS_INT8> %<tSS_UINT16> %<tSS_INT16> ...
                %<tSS_UINT32> %<tSS_INT32> %<tSS_BOOLEAN>
  %endswitch
%endfunction
