%implements "el5001" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT SSI Input device EL5001
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of an SSI Input
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCATTask(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Registering counter input with EtherCAT Driver
   */
  %<RegisterEtherCATSlaveBlock(block, "Beckhoff_EL5001", \
      MasterId, SlaveAddr, 1)>
  %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5001_PDO_Value", \
      LibBlockPWork(SSI_Long,"","",0))>
  %if StatusOp
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5001_PDO_Status", \
      LibBlockPWork(StatusByte,"","",0))>
  %endif

  /* %<Type> Block: %<Name> 
   * Configure SSI Slave:
   *    FrameErr=%<FrameError>
   *    PowerFail=%<PowerFail>
   *    EnableInhibit=%<EnableInhibit>
   *    SSICode=%<SSICode>
   *    BaudRate=%<BaudRate>
   *    FrameType=%<FrameType>
   *    FrameSize=%<FrameSize>
   *    DataLength=%<DataLength>
   *    InhibitTime=%<InhibitTime>
   */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x4061", 1, FrameError)>
  %<RegisterEtherCATSlaveSDO(block, 8, "0x4061", 2, PowerFail)>
  %<RegisterEtherCATSlaveSDO(block, 8, "0x4061", 3, EnableInhibit)>
  %<RegisterEtherCATSlaveSDO(block, 8, "0x4066", 0, SSICode)>
  %<RegisterEtherCATSlaveSDO(block, 16, "0x4067", 0, BaudRate)>
  %<RegisterEtherCATSlaveSDO(block, 8, "0x4068", 0, FrameType)>
  %<RegisterEtherCATSlaveSDO(block, 16, "0x4069", 0, FrameSize)>
  %<RegisterEtherCATSlaveSDO(block, 16, "0x406A", 0, DataLength)>
  %<RegisterEtherCATSlaveSDO(block, 16, "0x406B", 0, InhibitTime)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   */
  %%
  %if StatusOp
  /* %<Type> Block: %<Name> */
  %assign s0 = LibBlockOutputSignal(1,"","",0)
  %assign u0 = "*(uint8_T *)(%<LibBlockPWork(StatusByte,"","",0)>)"
  %<s0> = %<u0>;  /* Status */
  %endif
  %%
  %assign y0 = LibBlockOutputSignal(0,"","",0)
  %if RawOp
    %assign u0 = "*(uint32_T *)(%<LibBlockPWork(SSI_Long,"","",0)>)"
  %else
    %switch Filter
      %case 0
         %% No Filter
         %assign s0 = "*(uint32_T *)(%<LibBlockPWork(SSI_Long,"","",0)>)"
        %break
      %case 1
        %% Continuous filter
        %assign s0 = LibBlockContinuousState("","",0)
        %break
      %case 2
        %% Discrete filter
        %assign s0 =  LibBlockDiscreteState("","",0)
        %break
    %endswitch
    %if ScaleOp
      %assign m = "%<LibBlockParameter(FullScale,"","",0)>/%<InputMax>"
      %assign c = "+ %<LibBlockParameter(Offset,"","",0)>"
    %else
      %assign m = 1.0/InputMax
      %assign c = ""
    %endif
    %assign u0 = "%<m>*%<s0> %<c>"
  %endif
  %<y0> = %<u0>;  /* Data */
  %return
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a discrete filter
  %if Filter != 2
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Discrete Low Pass Filter
   */
  %%
  %assign d0 = LibBlockDiscreteState("","",0)
  %assign k  = LibBlockParameter(InputWeight,"","",0)
  %%
  %assign u0 = "*(uint32_T*)%<LibBlockPWork(SSI_Long,"","",0)>"
  %<d0> = %<k>*%<u0> 
    + (1 - %<k>)*%<d0>;
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a continuous filter
  %if Filter != 1
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Continuous Low Pass Filter
   */
  %%
  %assign y0 = LibBlockContinuousState("","",0)
  %assign d0 = LibBlockContinuousStateDerivative("","",0)
  %assign k  = LibBlockParameter(Omega,"","",0)
  %%
  %assign u0 = "*(uint32_T*)%<LibBlockPWork(SSI_Long,"","",0)>"
  %<d0> = %<k>*(%<u0> - %<y0>);
%endfunction
