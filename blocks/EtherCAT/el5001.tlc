%implements "el5001" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT SSI Input device EL5001
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of an SSI Input
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign MasterIdx = InitEtherCATMaster(block, system)
  %assign DomainIdx = InitEtherCATDomain(block, system, MasterIdx)
  %<InitEtherCATSlave( block, system, MasterIdx, DomainIdx)>

  %openfile buf

  /* %<Type> Block: %<Name> 
   * Configure SSI Slave:
   *    FrameErr=%<FrameError>
   *    PowerFail=%<PowerFail>
   *    EnableInhibit=%<EnableInhibit>
   *    SSICode=%<SSICode>
   *    BaudRate=%<BaudRate>
   *    FrameType=%<FrameType>
   *    FrameSize=%<FrameSize>
   *    DataLength=%<DataLength>
   *    InhibitTime=%<InhibitTime>
   */
    if (!%<LibGetRTModelErrorStatus()> && (
           ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4061,1,%<FrameError>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4061,2,%<PowerFail>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4061,3,%<EnableInhibit>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4066,0,%<SSICode>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4067,0,%<BaudRate>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4068,0,%<FrameType>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x4069,0,%<FrameSize>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x406A,0,%<DataLength>)
        || ecrt_slave_conf_sdo8(
           (ec_slave_t*)%<LibBlockPWork(SlavePtr,"","",0)>,\
           0x406B,0,%<InhibitTime>))) {
      %<LibSetRTModelErrorStatus("\"Init of SSI %<MasterId>:%<SlaveAddr> failed\"")>;
    }
  %closefile buf
  %<LibMdlStartCustomCode(buf,"trailer")>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Registering analog input with EtherCAT Driver
   */
  %<RegisterEtherCATSlave(block, system, "Beckhoff_EL5001_Value", \
      LibBlockPWork(SSI_Long,"","",0))>
  %if StatusOp
    %<RegisterEtherCATSlave(block, system, "Beckhoff_EL5001_Status", \
        LibBlockPWork(StatusByte,"","",0))>
  %endif
  %<LibBlockPWork(SlavePtr,"","",0)> = %<system.EtherCAT.SlaveStruct>;
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   */
  %%
  %if StatusOp
  /* %<Type> Block: %<Name> */
  %assign s0 = LibBlockOutputSignal(1,"","",0)
  %assign u0 = "*(uint8_T *)(%<LibBlockPWork(StatusByte,"","",0)>)"
  %<s0> = %<u0>;  /* Status */
  %endif
  %%
  %assign y0 = LibBlockOutputSignal(0,"","",0)
  %if RawOp
    %assign u0 = "*(uint32_T *)(%<LibBlockPWork(SSI_Long,"","",0)>)"
  %else
    %switch Filter
      %case 0
         %% No Filter
         %assign s0 = "*(uint32_T *)(%<LibBlockPWork(SSI_Long,"","",0)>)"
        %break
      %case 1
        %% Continuous filter
        %assign s0 = LibBlockContinuousState("","",0)
        %break
      %case 2
        %% Discrete filter
        %assign s0 =  LibBlockDiscreteState("","",0)
        %break
    %endswitch
    %if ScaleOp
      %assign m = "%<LibBlockParameter(FullScale,"","",0)>/%<InputMax>"
      %assign c = "+ %<LibBlockParameter(Offset,"","",0)>"
    %else
      %assign m = 1.0/InputMax
      %assign c = ""
    %endif
    %assign u0 = "%<m>*%<s0> %<c>"
  %endif
  %<y0> = %<u0>;  /* Data */
  %return
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a discrete filter
  %if Filter != 2
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Discrete Low Pass Filter
   */
  %%
  %assign d0 = LibBlockDiscreteState("","",0)
  %assign k  = LibBlockParameter(InputWeight,"","",0)
  %%
  %assign u0 = "*(uint32_T*)%<LibBlockPWork(SSI_Long,"","",0)>"
  %<d0> = %<k>*%<u0> 
    + (1 - %<k>)*%<d0>;
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a continuous filter
  %if Filter != 1
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Continuous Low Pass Filter
   */
  %%
  %assign y0 = LibBlockContinuousState("","",0)
  %assign d0 = LibBlockContinuousStateDerivative("","",0)
  %assign k  = LibBlockParameter(Omega,"","",0)
  %%
  %assign u0 = "*(uint32_T*)%<LibBlockPWork(SSI_Long,"","",0)>"
  %<d0> = %<k>*(%<u0> - %<y0>);
%endfunction
