%implements "el31xx" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Analog Input Terminal
%% series EL31xx
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of a analog input
%% terminal.
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCATTask(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Registering analog input with EtherCAT Driver
   */
  %if StatusOp
    %foreach sigIdx = Width
      %<RegisterEtherCATSlaveBlock(block, DeviceModel, \
          MasterId, SlaveAddr, 0)>
      %<RegisterEtherCATSlave(block, "%<Status_PDO>%<sigIdx+1>", \
          LibBlockPWork(StatusByte,"","",sigIdx))>
      %<RegisterEtherCATSlave(block, "%<Input_PDO>%<sigIdx+1>", \
          LibBlockPWork(AD_Word,"","",sigIdx))>
    %endforeach
  %else
    %foreach sigIdx = Width
        %<RegisterEtherCATSimplePDO(block, DeviceModel, "%<Input_PDO>%<sigIdx+1>", \
            MasterId, SlaveAddr, 0, LibBlockPWork(AD_Word,"","",sigIdx))>
    %endforeach
  %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * DEBUG: Width=%<Width> StatusOp=%<StatusOp> Signed=%<Signed> Filter=%<Filter>
   *        VectorizedOp=%<VectorOp> RawOp=%<RawOp> ScaleOp=%<ScaleOp>;
   */
  %%
  %% First the status outputs
  %%
  %if StatusOp
    /* %<Type> Block: %<Name> */
    %foreach sigIdx = Width
      %assign s0 = LibBlockOutputSignal(1,"","",sigIdx)
      %assign u0 = "*(uint8_T *)(%<LibBlockPWork(StatusByte,"","",sigIdx)>)"
      %<s0> = %<u0>;    /* Status */
    %endforeach
  %endif
  %%
  %% Now for the data outputs
  %%
  %if Signed
    %assign InputType = "(int16_T*)"
    %assign InputMax = 32768
  %else
    %assign InputType = "(uint16_T*)"
    %assign InputMax = 65536
  %endif
  %%
  %foreach sigIdx = Width
    %if VectorOp
      %% Single output vectorized;
      %assign y0 = LibBlockOutputSignal(0,"","",sigIdx)
    %else
      %% Fanned, separate outputs;
      %assign y0 = LibBlockOutputSignal(sigIdx,"","",0)
    %endif
    %%
    %if RawOp
      %assign u0 = "*%<InputType>(%<LibBlockPWork(AD_Word,"","",sigIdx)>)"
    %else
      %switch Filter
        %case 0
          %% No filter
          %assign s0 = "*%<InputType>(%<LibBlockPWork(AD_Word,"","",sigIdx)>)"
          %break
        %case 1
          %% Continuous filter
          %assign s0 = LibBlockContinuousState("","",sigIdx)
          %break
        %case 2
          %% Discrete filter
          %assign s0 = LibBlockDiscreteState("","",sigIdx)
          %break
      %endswitch
      %if ScaleOp
        %assign m = "%<LibBlockParameter(FullScale,"","",sigIdx)>/%<InputMax>"
        %assign c = LibBlockParameter(Offset,"","",sigIdx)
      %else
        %assign m = RawFullScale/InputMax
        %assign c = RawOffset
      %endif
      %assign u0 = "%<m>*%<s0> + %<c>"
    %endif
    %<y0> = %<u0>;  /* Data */
  %endforeach
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a discrete filter
  %if Filter != 2
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Discrete Low Pass Filter
   */
  %if Signed
    %assign InputType = "(int16_T*)"
  %else
    %assign InputType = "(uint16_T*)"
  %endif
  %%
  %foreach sigIdx = Width
    %assign d0 = LibBlockDiscreteState("","",sigIdx)
    %assign k  = LibBlockParameter(InputWeight,"","",sigIdx)
    %%
    %assign u0 = "*%<InputType>(%<LibBlockPWork(AD_Word,"","",sigIdx)>)"
    %%
    %<d0> = %<k>*%<u0>
        + (1 - %<k>)*%<d0>;
  %endforeach
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Derivatives(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %% Only do this in case of a continuous filter
  %if Filter != 1
    %return
  %endif
  %%

  /* %<Type> Block: %<Name> 
   * Continuous Low Pass Filter
   */
  %if Signed
    %assign InputType = "(int16_T*)"
  %else
    %assign InputType = "(uint16_T*)"
  %endif
  %%
  %foreach sigIdx = Width
    %assign y0 = LibBlockContinuousState("","",sigIdx)
    %assign d0 = LibBlockContinuousStateDerivative("","",sigIdx)
    %assign k  = LibBlockParameter(Omega,"","",sigIdx)
    %%
    %assign u0 = "*%<InputType>(%<LibBlockPWork(AD_Word,"","",sigIdx)>)"
    %%
    %<d0> = %<k> * (%<u0> - %<y0>);
  %endforeach
%endfunction
