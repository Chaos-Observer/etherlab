%implements "bk1120_in" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT to K-Bus converter KL1120
%% 
%% This TLC Implements the necessary IO Functions to get process data
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction

    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCATTask(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%
  %switch InputDataType
    %case 1
    %case 2
    %case 3
    %case 4
    %case 5
    %case 6
    %case 7
    %case 8
    %assign bytes = ((InputDataType - 1) + Width)/8 + 1
    %break
    %%
    %case 9
    %case 10
    %assign bytes = Width
    %break
    %%
    %case 11
    %case 12
    %assign bytes = 2*Width
    %break
    %%
    %case 13
    %case 14
    %assign bytes = 4*Width
    %break
    %%
  %endswitch

  /* %<Type> Block: %<Name> 
   * Registering digital input with Master
   */
  %<RegisterEtherCATSlaveAddrRange(block, "Beckhoff_BK1120", \
        MasterId, SlaveAddr, "EC_DIR_INPUT", ImageOffset, bytes, \
        LibBlockPWork(InputAddr,"","",0))>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   */
  %%
  %% Input Vector Case: each input of the vector is tested
  %% for truth and the corresponding output bit is then set
  %if InputDataType >= 1 && InputDataType < 9
      %assign bitoffset = InputDataType-1
      %foreach idx = Width
        %<LibBlockOutputSignal(0,"","",idx)> = 
               ((uint8_T *)%<LibBlockPWork(InputAddr,"","",0)>)...
                 [%<(bitoffset+idx)/8>] & %<1<<(bitoffset+idx)%8> != 0;
      %endforeach
  %else
      %%
      %switch InputDataType
        %case 9
        %assign dtype = "int8_T"
        %assign d_width = 1
        %assign block.Swap = 0
        %break
        %%
        %case 10
        %assign dtype = "uint8_T"
        %assign d_width = 1
        %assign block.Swap = 0
        %break
        %%
        %case 11
        %assign dtype = "int16_T"
        %assign d_width = 2
        %break
        %%
        %case 12
        %assign dtype = "uint16_T"
        %assign d_width = 2
        %break
        %%
        %case 13
        %assign dtype = "int32_T"
        %assign d_width = 4
        %break
        %%
        %case 14
        %assign dtype = "uint32_T"
        %assign d_width = 4
        %break
        %%
      %endswitch
      %if Swap && Filter == 0
        {
          uint8_T tmp[%<d_width>];
          uint8_T *p;
      %endif
      %foreach sigIdx = Width
          %switch Filter
            %case 0
              %if Swap

                  p = (uint8_T *)...
                    &((%<dtype> *)%<LibBlockPWork(InputAddr,"","",0)>)[%<sigIdx>];
                  %foreach idx = d_width
                    tmp[%<idx>] = p[%<d_width - idx - 1>];
                  %endforeach
                  %assign s0 = "*(%<dtype> *)tmp"
              %else
                  %assign s0 = ...
                        "((%<dtype> *)%<LibBlockPWork(InputAddr,"","",0)>)[%<sigIdx>]"
              %endif
              %break
            %case 1
              %% Continuous filter
              %assign s0 = LibBlockContinuousState("","",sigIdx)
              %break
            %case 2
              %% Discrete filter
              %assign s0 = LibBlockDiscreteState("","",sigIdx)
              %break
          %endswitch
          %if Scaling
            %assign m = "%<LibBlockParameter(FullScale,"","",sigIdx)>/%<InputMax>*"
            %assign c = " + %<LibBlockParameter(Offset,"","",sigIdx)>"
          %else
            %assign m = ""
            %assign c = ""
          %endif
          %<LibBlockOutputSignal(0,"","",sigIdx)> = %<m>%<s0>%<c>;
      %endforeach
      %if Swap && Filter == 0
        }
      %endif
  %endif
  %%
%endfunction
