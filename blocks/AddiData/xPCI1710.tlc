%%
%% Generic Routines to handle AddiData 1710
%% 
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Init_xPCI1710( block, system) void
%% This function checks whether the xPCI1710 system has been called once
%% before already, which is demonstrated by the existance of variable 
%% system.xPCI1710. If not, include C-header file for xPCI1710, 
%% and declare a variable where the slave's data structure is placed 
%% by xPCI1710 when registering the slaves during mdlStart()
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %if !EXISTS(system.xPCI1710)
    %trace "Initializing xPCI1710 Interface"
    %addtorecord system xPCI1710 { ...
                NumCards 0 ...
                }

    %% xPCI1710 header
    %<LibAddToCommonIncludes("xPCI1710.h")>

  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Get_xPCI_Idx(system)
%% Find the record index for master %<CardId>
%% Return: DeviceIdx : index in system.xPCI1710.Device if found
%%         -1: not found
%%
%% %<CardId> is a global variable 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %with system.xPCI1710
    %foreach m = NumCards
      %if Card[m].Id == CardId
        %trace "Found PCI Card %<CardId> @ Idx %<m>"
        %return m
      %endif
    %endforeach
  %endwith
  %return -1
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Init_xPCI_Card( block, system)
%% Make sure the card gets registered and deregistered
%% Return: CardIdx : index in system.xPCI1710.Cards
%%                      of master
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign model_c = LibGetModelDotCFile()

  %with system.xPCI1710
    %assign CardIdx = Get_xPCI_Idx(system)
    %if CardIdx != -1
      %return CardIdx
    %endif

    %% This is the first time this Card was called. Setup the structures
    %% required to get it to work.

    %assign NewCardIdx = NumCards

    %assign system.xPCI1710.NumCards = NewCardIdx + 1

    %% Create record structure for this card in the system
    %% All modules attached to this card will be recorded here
    %addtorecord system.xPCI1710 Card { ...
          Id CardId ...
          CardStruct "xPCI1710_card%<NewCardIdx>" ...
          }
    %trace "Added new Record for card %<CardId> @ %<NewCardIdx>; ...
           system.xPCI1710 = %<system.xPCI1710>"

    %with Card[NewCardIdx]
      %% Define a C global pointer for the card. All card calls
      %% require this pointer
      %openfile buf

        /* xPCI1710 card %<CardId> */
        struct xPCI1710_card_data *%<CardStruct>;
      %closefile buf
      %<LibSetSourceFileSection(model_c, "Declarations", buf)>

      %% Insert code to request the master at the start of mdlStart()
      %openfile buf
  
      /* Grab xPCI1710 Card %<CardId> */
      %<CardStruct> = xPCI1710_lock_card("%<CardId>", NULL,NULL);
      if (!%<CardStruct>) {
          %<LibSetRTModelErrorStatus("\"xPCI1710 Card %<CardId> initialise failed\"")>;
      }
      %closefile buf
      %<LibMdlStartCustomCode(buf,"execution")>

      %openfile buf

      /* Release xPCI1710 Card %<CardId> */
      if (%<CardStruct>) {
        xPCI1710_unlock_card(%<CardStruct>);
      }
      %closefile buf
      %<LibMdlTerminateCustomCode(buf,"trailer")>

    %endwith
  %endwith

  %return NewCardIdx
%endfunction
