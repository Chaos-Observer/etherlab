%implements "etl_message" "C"

%include "ETL.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function FcnWriteSetup(Model) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  %openfile buf = "%<LibGetModelName()>_messages.c"
  /* Register pdserv_event()s */

  #include "%<LibGetMdlPubHdrBaseName()>.h"
  #include "%<LibGetMdlPrvHdrBaseName()>.h"

  struct pdevent *etl_message[%<SIZE(EtlMessageList,1)>];

  int %<LibGetModelName()>_register_messages()
  {
    %foreach i = SIZE(EtlMessageList,1)
      %<EtlMessageList[i]>
    %endforeach
    return 0;
  }
  %closefile buf

%endfunction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<LibAddToCommonIncludes("<time.h>")>
  %<LibAddToCommonIncludes("<pdserv.h>")>

  %<LibCacheFunctionPrototype("int %<LibGetModelName()>_register_messages(void);")>
  %<LibCacheFunctionPrototype("struct pdserv* get_pdserv_ptr(void);")>
  %<LibCacheFunctionPrototype( ...
        "const struct timespec *get_etl_world_time(size_t tid);")>

  %<LibCacheExtern("extern struct pdevent *etl_message[];")>

  %addtorecord CompiledModel EtlMessageList []
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign idx = SIZE(CompiledModel.EtlMessageList, 1)
  %addtorecord block EtlMessagePtr "etl_message[%<idx>]"

  %openfile buf
  {
     %if SIZE(SFcnParamSettings.MessageList,1)
       %assign message_list_ident = "message_list"
       static const char* %<message_list_ident>[] = {
         %foreach i = LibBlockInputSignalWidth(0)
           "%<STRING(SFcnParamSettings.MessageList[i])>",
         %endforeach
       };
     %else
       %assign message_list_ident = "NULL"
     %endif

     %<EtlMessagePtr> = \
       pdserv_event(get_pdserv_ptr(), \
         "%<FEVAL("blockpath", LibGetFormattedBlockPath(block))>", \
         %<LibBlockInputSignalWidth(0)>);
     if (!%<EtlMessagePtr>)
       return -1;

     pdserv_event_set_text(%<EtlMessagePtr>, %<message_list_ident>);
  }
  %closefile buf

  %assign CompiledModel.EtlMessageList = EtlMessageList + buf
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %%
  %assign tid = ETLBlockTID()
  %%
  %assign invert = SFcnParamSettings.Invert ? "!" : ""
  %%
  %assign prio = ["EMERG_EVENT", "ALERT_EVENT", "CRIT_EVENT", ...
     "ERROR_EVENT", "WARN_EVENT", "NOTICE_EVENT", "INFO_EVENT", ...
     "DEBUG_EVENT"]

  /* %<Type> Block: %<Name>
   */
  %assign rollVars = ["U", "Y", "P"]
  %if EXISTS(Confirm)
    %assign rollVars = rollVars + "RWork"
  %endif
  %roll sigIdx = RollRegions, lcv = RollThreshold, block, "Roller", rollVars
    %%
    %assign SignalIdx = lcv != "" ? "%<lcv>+%<sigIdx>" : sigIdx
    %%
    %assign u = LibBlockInputSignal(0,"",lcv,sigIdx)
    %assign y = LibBlockOutputSignal(0,"",lcv,sigIdx)
    %assign ResetTest = LibBlockNumInputPorts(block) > 1 \
        ? "%<LibBlockInputSignal(1,"",lcv,sigIdx)> && %<y>" : y
    %if EXISTS(Confirm)
      %assign delay = LibBlockRWork(ConfirmTime,"",lcv,sigIdx)
    %endif
    %%
    if (%<invert>%<u> && %<LibBlockParameter(Enable,"",lcv,sigIdx)>) {
      if (!%<y>) {
        %if EXISTS(delay)
          %<delay> += %<ETLBlockSampleTime()>;
          if (%<delay> > %<LibBlockParameter(Confirm,"",lcv,sigIdx)>) {
        %endif
        %%
            const struct timespec *time = get_etl_world_time(%<tid>);

            %<y> = 1.0e-9 * time->tv_nsec + time->tv_sec;
            pdserv_event_set(%<EtlMessagePtr>, \
                    %<SignalIdx>, %<prio[SFcnParamSettings.Priority-1]>, time);
        %%
        %if EXISTS(delay)
          }
        %endif
      }
    }
    else \
      %if EXISTS(delay)
        {
          %<delay> = 0.0;
      %endif
          if (%<ResetTest>) {
            %<y> = 0.0;
            pdserv_event_reset(%<EtlMessagePtr>, \
                    %<SignalIdx>, get_etl_world_time(%<tid>));
          }
      %if EXISTS(delay)
        }
      %endif
  %endroll
%endfunction
