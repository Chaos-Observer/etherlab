%implements "xPCI1710_etm" "C"

%%
%% Hardware Driver for the Edge Triggered Mode of Addi-Data's APCI1710
%% Timer card
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the hardware
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "xPCI1710.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<Init_xPCI1710(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %assign CardIdx = Init_xPCI_Card(block, system)

  %% Place the CardStruct variable name in the block for easy access
  %addtorecord block CardStruct system.xPCI1710.Card[CardIdx].CardStruct
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Register PCI1710_ETM
   */
  {
     uint_T hi_pulse[] = {0,0};
     if (!%<LibGetRTModelErrorStatus()> && 
         xPCI1710_init_etm(%<CardStruct>, %<Module>, %<ClockSrc>, \
                        %<Divisor>, hi_pulse, \
                        &%<LibBlockPWork(PrivData,"","",0)>)) {
        %<LibSetRTModelErrorStatus("\"Failed to initialise xPCI1710_ETM\"")>;
     }
  }

%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Terminate(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   * Deregister PCI1710_ETM
   */
  xPCI1710_close_etm(%<LibBlockPWork(PrivData,"","",0)>);
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  /* %<Type> Block: %<Name> 
   */
  %%
  { 
      uint32_T pulse_width[2];
      uint32_T period[2];
      uint8_T status[2];

      if (xPCI1710_ReadETMValue( \
                  %<LibBlockPWork(PrivData,"","",0)>, \
                  pulse_width, period, status));
                  
      %<LibBlockOutputSignal(0,"","",0)> = pulse_width[0];
      %<LibBlockOutputSignal(0,"","",1)> = pulse_width[1];
      %<LibBlockOutputSignal(1,"","",0)> = period[0];
      %<LibBlockOutputSignal(1,"","",1)> = period[1];
      %<LibBlockOutputSignal(2,"","",0)> = status[0];
      %<LibBlockOutputSignal(2,"","",1)> = status[1];
  }
%endfunction
