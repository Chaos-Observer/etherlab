function rv = el2xxx(model,input_type, diagnose)

%model = 'EL2032v2'
%diagnose = 1;
%input_type = 'Vector Input'

entries = [...
        hex2dec('3001'), 1, 1, 1001; ...
        hex2dec('3001'), 2, 1, 1001; ...
        hex2dec('3001'), 3, 1, 1001; ...
        hex2dec('3001'), 4, 1, 1001; ...
        
        hex2dec('7000'), 1, 1, 1001; ...
        hex2dec('7010'), 1, 1, 1001; ...
        hex2dec('7020'), 1, 1, 1001; ...
        hex2dec('7030'), 1, 1, 1001; ...
        hex2dec('7040'), 1, 1, 1001; ...
        hex2dec('7050'), 1, 1, 1001; ...
        hex2dec('7060'), 1, 1, 1001; ...
        hex2dec('7070'), 1, 1, 1001; ...

        hex2dec('3101'), 1, 1, 1001; ...
        hex2dec('3101'), 2, 1, 1001; ...

        hex2dec('6000'), 1, 1, 1001; ...
        hex2dec('6010'), 1, 1, 1001; ...
        hex2dec('6020'), 1, 1, 1001; ...
        hex2dec('6030'), 1, 1, 1001; ...
        ];

        

pdo = [...
        hex2dec('1600'),  1, 1;...
        hex2dec('1601'),  2, 2;...
        hex2dec('1602'),  3, 3;...
        hex2dec('1603'),  4, 4;...

        hex2dec('1600'),  5, 5;...
        hex2dec('1601'),  6, 6;...
        hex2dec('1602'),  7, 7;...
        hex2dec('1603'),  8, 8;...
        hex2dec('1604'),  9, 9;...
        hex2dec('1605'), 10, 10;...
        hex2dec('1606'), 11, 11;...
        hex2dec('1607'), 12, 12;...

        hex2dec('1a00'), 13, 13;...
        hex2dec('1a01'), 14, 14;...

        hex2dec('1a00'), 15, 15;...
        hex2dec('1a01'), 16, 16;...
        hex2dec('1a02'), 17, 17;...
        hex2dec('1a03'), 18, 18;...
        ];

%   Model       ProductCode          Revision        RxStart RxEnd TxStart TxEnd
models = struct(...
  'EL2004'  ,[hex2dec('07d43052')  hex2dec('00000000'),1,      4,   0    ],...
  'EL2004v2',[hex2dec('07d43052')  hex2dec('00100000'),5,      8,   0    ],...
  'EL2008'  ,[hex2dec('07d83052')  hex2dec('00100000'),5,     12,   0    ],...
  'EL2032'  ,[hex2dec('07f03052')  hex2dec('00000000'),1,      2,  13, 14],...
  'EL2032v2',[hex2dec('07f03052')  hex2dec('00100000'),5,      6,  15, 16],...
  'EL2034'  ,[hex2dec('07f23052')  hex2dec('00100000'),5,      8,  15, 18],...
  'EL2602'  ,[hex2dec('0a2a3052')  hex2dec('00100000'),5,      6,   0    ],...
  'EL2612'  ,[hex2dec('0a343052')  hex2dec('00100000'),5,      6,   0    ],...
  'EL2622'  ,[hex2dec('0a3e3052')  hex2dec('00100000'),5,      6,   0    ]...
   );

rv.SlaveConfig.vendor = 2;

product = models.(model);
rv.SlaveConfig.product = product(1);

% RxPdo SyncManager
rv.SlaveConfig.pdo = { {0 0 {}} };


% Populate the RxPDO Inputs structure
rv.SlaveConfig.pdo{1}{3} = arrayfun(...
        @(x) {pdo(x,1), entries(pdo(x,2):pdo(x,3),:)}, ...
        product(3):product(4), ...
        'UniformOutput',0 ...
);

% Populate the block's output port(s)
r = 0:(product(4) - product(3));
if strcmp(input_type, 'Vector Input')
    rv.PortConfig.input.pdo = [zeros(numel(r),4)];
    rv.PortConfig.input.pdo(:,2) = r;
else
    rv.PortConfig.input = arrayfun(@(x) struct('pdo', [0, x, 0, 0]), r);
end



% Maybe diagnose TxPdo SyncManager
if product(5)
  rv.SlaveConfig.pdo{2} = {1 1 {}};

% Populate the TxPDO Inputs structure
  rv.SlaveConfig.pdo{2}{3} = arrayfun(...
        @(x) {pdo(x,1), entries(pdo(x,2):pdo(x,3),:)}, ...
        product(5):product(6), ...
        'UniformOutput',0 ...
  );

% If diagnose is enabled and available set outputs
  if  diagnose && product(5)
     r = 0:(product(6) - product(5));
    if strcmp(input_type, 'Vector Input')
      rv.PortConfig.output.pdo = [ones(numel(r),1) zeros(numel(r),3)];
      rv.PortConfig.output.pdo(:,2) = r;
    else
      rv.PortConfig.output = arrayfun(@(x) struct('pdo', [1, x, 0, 0]), r);
    end
  end
end
return