function el1xxx(method, varargin)

if ~nargin
    return
end

%display([gcb ' ' method]);

switch lower(method)
case 'set'
    ud = get_param(gcbh,'UserData');
    model = get_param(gcbh, 'model');

    if model(1) ~= 'E'
        errordlg('Please choose a correct slave', gcb);
        return
    end

    ud.SlaveConfig = slave_config(model);
    ud.PortConfig = port_config(ud.SlaveConfig);
    set_param(gcbh, 'UserData', ud);

case 'check'
    % If UserData.SlaveConfig does not exist, this is an update
    % Convert this block and return
    model = get_param(gcbh,'model');

    ud = get_param(gcbh, 'UserData');

    % Get slave and port configuration based on product code and revision
    sc = slave_config(ud.SlaveConfig.product, ud.SlaveConfig.revision);
    pc = port_config(sc);

    if isequal(sc.sm, ud.SlaveConfig.sm) && ~isequal(sc, ud.SlaveConfig)
        % The slave has a new name
        warning('el1xxx:NewName', ...
                '%s: Renaming device from %s to %s', ...
                gcb, get_param(gcbh,'model'), sc.description)
        set_param(gcbh, 'model', sc.description)
        return;
    end

    if ~isequal(pc, ud.PortConfig)
        errordlg('Configuration error. Please replace this block', gcb);
        %error('el1xxx:PortConfig', 'Configuration error on %s. Replace it',...
                %gcb);
    end

case 'update'
    update_devices(varargin{1}, slave_config());

otherwise
    display([gcb, ': Unknown method ', method])
end

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function rv = slave_config(varargin)

entries = [...
        hex2dec('3101'), 1, 1; ...
        hex2dec('3101'), 2, 1; ...
        hex2dec('3101'), 3, 1; ...
        hex2dec('3101'), 4, 1; ...

        hex2dec('6000'), 1, 1; ...
        hex2dec('6010'), 1, 1; ...
        hex2dec('6020'), 1, 1; ...
        hex2dec('6030'), 1, 1; ...
        hex2dec('6040'), 1, 1; ...
        hex2dec('6050'), 1, 1; ...
        hex2dec('6060'), 1, 1; ...
        hex2dec('6070'), 1, 1; ...
        hex2dec('6080'), 1, 1; ...
        hex2dec('6090'), 1, 1; ...
        hex2dec('60a0'), 1, 1; ...
        hex2dec('60b0'), 1, 1; ...
        hex2dec('60c0'), 1, 1; ...
        hex2dec('60d0'), 1, 1; ...
        hex2dec('60e0'), 1, 1; ...
        hex2dec('60f0'), 1, 1; ...
        ];

pdo = [...
        hex2dec('1a00'),  1, 1;...
        hex2dec('1a01'),  2, 2;...
        hex2dec('1a02'),  3, 3;...
        hex2dec('1a03'),  4, 4;...

        hex2dec('1a00'),  5, 5;...
        hex2dec('1a01'),  6, 6;...
        hex2dec('1a02'),  7, 7;...
        hex2dec('1a03'),  8, 8;...
        hex2dec('1a04'),  9, 9;...
        hex2dec('1a05'), 10, 10;...
        hex2dec('1a06'), 11, 11;...
        hex2dec('1a07'), 12, 12;...
        hex2dec('1a08'), 13, 13;...
        hex2dec('1a09'), 14, 14;...
        hex2dec('1a0a'), 15, 15;...
        hex2dec('1a0b'), 16, 16;...
        hex2dec('1a0c'), 17, 17;...
        hex2dec('1a0d'), 18, 18;...
        hex2dec('1a0e'), 19, 19;...
        hex2dec('1a0f'), 20, 20;...
        ];

%   Model       ProductCode          Revision             PdoStartRow PdoEndRow
models = {...
    'EL1002', hex2dec('03ea3052'), hex2dec('00100000'), 5,          6; ...
    'EL1012', hex2dec('03f43052'), hex2dec('00100000'), 5,          6; ...
    'EL1202', hex2dec('03b23052'), hex2dec('00100000'), 5,          6; ...
    'EL1702', hex2dec('03a63052'), hex2dec('00100000'), 5,          6; ...
    'EL1712', hex2dec('03b03052'), hex2dec('00100000'), 5,          6; ...
    'EL1722', hex2dec('03ba3052'), hex2dec('00100000'), 5,          6; ...
    'EL1004', hex2dec('03ec3052'), hex2dec('00100000'), 5,          8; ...
    'EL1014', hex2dec('03f63052'), hex2dec('00100000'), 5,          8; ...
    'EL1024', hex2dec('04003052'), hex2dec('00100000'), 5,          8; ...
    'EL1034', hex2dec('040a3052'), hex2dec('00100000'), 5,          8; ...
    'EL1084', hex2dec('043c3052'), hex2dec('00100000'), 5,          8; ...
    'EL1094', hex2dec('04463052'), hex2dec('00100000'), 5,          8; ...
    'EL1104', hex2dec('04503052'), hex2dec('00100000'), 5,          8; ...
    'EL1114', hex2dec('045a3052'), hex2dec('00100000'), 5,          8; ...
    'EL1124', hex2dec('04643052'), hex2dec('00100000'), 5,          8; ...
    'EL1134', hex2dec('046e3052'), hex2dec('00100000'), 5,          8; ...
    'EL1144', hex2dec('04783052'), hex2dec('00100000'), 5,          8; ...
    'EL1804', hex2dec('070c3052'), hex2dec('00100000'), 5,          8; ...
    'EL1008', hex2dec('03f03052'), hex2dec('00100000'), 5,         12; ...
    'EL1018', hex2dec('03fa3052'), hex2dec('00100000'), 5,         12; ...
    'EL1088', hex2dec('04403052'), hex2dec('00100000'), 5,         12; ...
    'EL1098', hex2dec('034a3052'), hex2dec('00100000'), 5,         12; ...
    'EL1808', hex2dec('07103052'), hex2dec('00100000'), 5,         12; ...
    'EL1809', hex2dec('07113052'), hex2dec('00100000'), 5,         20; ...
    'EL1814', hex2dec('07163052'), hex2dec('00100000'), 5,         20; ...
    'EL1819', hex2dec('071b3052'), hex2dec('00100000'), 5,         20; ...
    'EL1862', hex2dec('07463052'), hex2dec('00100000'), 5,         20; ...
    'EL1872', hex2dec('07503052'), hex2dec('00100000'), 5,         20; ...
    'EL1889', hex2dec('07613052'), hex2dec('00100000'), 5,         20; ...
    'EL1004_0010000A', hex2dec('03ec3052'), hex2dec('0010000A'), 1, 4; ...
    'EL1014_00000000', hex2dec('03f63052'), hex2dec('00000000'), 1, 4; ...
    };

switch nargin
case 2
    pos = cell2mat(models(:,2)) == varargin{1}...
        & cell2mat(models(:,3)) == varargin{2};
    product = models(pos,:);

case 1
    product = models(strcmp(models(:,1),varargin{1}),:);

otherwise
    fields = models(:,1);
    obsolete = cellfun(@length, fields) > 11;
    rv = vertcat(sort(fields(~obsolete)), sort(fields(obsolete)));
    return
end

if isempty(product)
    rv = [];
    return;
end

rv.vendor = 2;
rv.description = product{1};
rv.product = product{2};
rv.revision = product{3};
rv.sm = {...
        {0, 1, {}} ...  % Only 1 input SyncManager
};

% Populate the PDO structure
rv.sm{1}{3} = arrayfun(...
        @(x) {pdo(x,1), entries(pdo(x,2):pdo(x,3),:)}, ...
        product{4}:product{5}, ...
        'UniformOutput',0 ...
);
return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function rv = port_config(SlaveConfig)
% Populate the blocks output port(s)

rv.output.pdo = [];
try
    r = 0:(numel(SlaveConfig.sm{1}{3})-1);
catch
    return;
end

if strcmp(get_param(gcbh,'vector'), 'on')
    rv.output.pdo = zeros(numel(r),4);
    rv.output.pdo(:,2) = r;
    rv.output.pdo_data_type = 1001;
else
    rv.output = arrayfun(@(x) struct('pdo', [0, x, 0, 0], 'pdo_data_type', 1001), r);
end

return
