function ep2xxx(method, varargin)

if ~nargin
    return
end

%display([gcb ' ' method]);

switch lower(method)
case 'set'
    ud = get_param(gcbh,'UserData');
    model = get_param(gcbh, 'model');

    if model(1) ~= 'E'
        errordlg('Please choose a correct slave', gcb);
        return
    end

    ud.SlaveConfig = slave_config(model);
    ud.PortConfig = port_config(ud.SlaveConfig.sm);
    set_param(gcbh, 'UserData', ud);

case 'check'
    % If UserData.SlaveConfig does not exist, this is an update
    % Convert this block and return
    model = get_param(gcbh,'model');

    ud = get_param(gcbh, 'UserData');

    % Get slave and port configuration based on product code and revision
    sc = slave_config(ud.SlaveConfig.product, ud.SlaveConfig.revision);
    pc = port_config(sc.sm);

    if isequal(sc.sm, ud.SlaveConfig.sm) && ~isequal(sc, ud.SlaveConfig)
        % The slave has a new name
        warning('ep2xxx:NewName', ...
                '%s: Renaming device from %s to %s', ...
                gcb, get_param(gcbh,'model'), sc.description)
        set_param(gcbh, 'model', sc.description)
        return;
    end

    if ~isequal(pc, ud.PortConfig)
        errordlg('Configuration error. Please replace this block', gcb);
        %error('ep2xxx:PortConfig', 'Configuration error on %s. Replace it',...
                %gcb);
    end

case 'update'
    update_devices(varargin{1}, slave_config());

otherwise
    display([gcb, ': Unknown method ', method])
end

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function rv = slave_config(varargin)

sm = {...
           {{hex2dec('1600'), [ hex2dec('7000'), 1, 1]},... %1
            {hex2dec('1601'), [ hex2dec('7010'), 1, 1]},...
            {hex2dec('1602'), [ hex2dec('7020'), 1, 1]},...
            {hex2dec('1603'), [ hex2dec('7030'), 1, 1]},...
            {hex2dec('1604'), [ hex2dec('7040'), 1, 1]},...
            {hex2dec('1605'), [ hex2dec('7050'), 1, 1]},...
            {hex2dec('1606'), [ hex2dec('7060'), 1, 1]},...
            {hex2dec('1607'), [ hex2dec('7070'), 1, 1]}},...
           {{hex2dec('1608'), [ hex2dec('7080'), 1, 1]},... %2
            {hex2dec('1609'), [ hex2dec('7090'), 1, 1]},...
            {hex2dec('160a'), [ hex2dec('70a0'), 1, 1]},...
            {hex2dec('160b'), [ hex2dec('70b0'), 1, 1]},...
            {hex2dec('160c'), [ hex2dec('70c0'), 1, 1]},...
            {hex2dec('160d'), [ hex2dec('70d0'), 1, 1]},...
            {hex2dec('160e'), [ hex2dec('70e0'), 1, 1]},...
            {hex2dec('160f'), [ hex2dec('70f0'), 1, 1]}},...
           {{hex2dec('1a00'), [ hex2dec('6000'), 1, 1]},... %3
            {hex2dec('1a01'), [ hex2dec('6010'), 1, 1]},...
            {hex2dec('1a02'), [ hex2dec('6020'), 1, 1]},...
            {hex2dec('1a03'), [ hex2dec('6030'), 1, 1]},...
            {hex2dec('1a04'), [ hex2dec('6040'), 1, 1]},...
            {hex2dec('1a05'), [ hex2dec('6050'), 1, 1]},...
            {hex2dec('1a06'), [ hex2dec('6060'), 1, 1]},...
            {hex2dec('1a07'), [ hex2dec('6070'), 1, 1]}},...
           {{hex2dec('1a08'), [ hex2dec('6080'), 1, 1]},... %4
            {hex2dec('1a09'), [ hex2dec('6090'), 1, 1]},...
            {hex2dec('1a0a'), [ hex2dec('60a0'), 1, 1]},...
            {hex2dec('1a0b'), [ hex2dec('60b0'), 1, 1]},...
            {hex2dec('1a0c'), [ hex2dec('60c0'), 1, 1]},...
            {hex2dec('1a0d'), [ hex2dec('60d0'), 1, 1]},...
            {hex2dec('1a0e'), [ hex2dec('60e0'), 1, 1]},...
            {hex2dec('1a0f'), [ hex2dec('60f0'), 1, 1]}},...
           {{hex2dec('1604'), [               0, 0, 4;...  %5
                                hex2dec('7040'), 1, 1]},...
            {hex2dec('1605'), [ hex2dec('7050'), 1, 1]},...
            {hex2dec('1606'), [ hex2dec('7060'), 1, 1]},...
            {hex2dec('1607'), [ hex2dec('7070'), 1, 1]}},...
           {{hex2dec('1a00'), [ hex2dec('6000'), 1, 1]},... %6
            {hex2dec('1a01'), [ hex2dec('6010'), 1, 1]},...
            {hex2dec('1a02'), [ hex2dec('6020'), 1, 1]},...
            {hex2dec('1a03'), [ hex2dec('6030'), 1, 1;...
                                              0, 0, 4]}},...
           {{hex2dec('1600'), [ hex2dec('7000'), 1, 1;... %7
                                hex2dec('7010'), 1, 1;...
                                hex2dec('7020'), 1, 1;...
                                hex2dec('7030'), 1, 1]},...
            {hex2dec('1601'), [ hex2dec('7040'), 1, 1;...
                                hex2dec('7050'), 1, 1;...
                                hex2dec('7060'), 1, 1;...
                                hex2dec('7070'), 1, 1]}},...
           {{hex2dec('1600'), [ hex2dec('7000'), 1, 1]},... %8
            {hex2dec('1601'), [ hex2dec('7010'), 1, 1]},...
            {hex2dec('1602'), [ hex2dec('7020'), 1, 1]},...
            {hex2dec('1603'), [ hex2dec('7030'), 1, 1]}} ...
};

%   Model       ProductCode          Revision       PdoStartRow Description
models = {...
    'EP2001-1000',...                   %      SmGrp,Dir,SmIdx
        hex2dec('07d14052'), hex2dec('001103e8'), [7, 0, 0], '8 Ch DigOut'; ...
    'EP2008-0001',...
        hex2dec('07d84052'), hex2dec('00110001'), [1, 0, 0], '8 Ch DigOut'; ...
    'EP2008-0002',...
        hex2dec('07d84052'), hex2dec('00110002'), [1, 0, 0], '8 Ch DigOut'; ...
    'EP2028-0001',...
        hex2dec('07ec4052'), hex2dec('00100001'), [1, 0, 0], '8 Ch DigOut'; ...
    'EP2028-0002',...
        hex2dec('07ec4052'), hex2dec('00110002'), [1, 0, 0], '8 Ch DigOut'; ...
    'EP2308-0000',...
        hex2dec('09044052'), hex2dec('00100000'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2308-0001',...
        hex2dec('09044052'), hex2dec('00110001'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2308-0002',...
        hex2dec('09044052'), hex2dec('00110002'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2318-0001',...
        hex2dec('090e4052'), hex2dec('00110001'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2318-0002',...
        hex2dec('090e4052'), hex2dec('00110002'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2328-0001',...
        hex2dec('09184052'), hex2dec('00110001'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2328-0002',...
        hex2dec('09184052'), hex2dec('00110002'), [5, 0, 0;...
                                                   6, 1, 1], '4 Ch DigIO'; ...
    'EP2338-0001',...
        hex2dec('09224052'), hex2dec('00120001'), [1, 0, 0;...
                                                   3, 1, 1], '8 Ch DigIO'; ...
    'EP2338-0002',...
        hex2dec('09224052'), hex2dec('00120002'), [1, 0, 0;...
                                                   3, 1, 1], '8 Ch DigIO'; ...
    'EP2339-0021',...
        hex2dec('09234052'), hex2dec('00110015'), [1, 0, 0;...
                                                   2, 0, 1;...
                                                   3, 1, 2;...
                                                   4, 1, 3], '16 Ch DigIO'; ...
    'EP2339-0022',...
        hex2dec('09234052'), hex2dec('00110016'), [1, 0, 0;...
                                                   2, 0, 1;...
                                                   3, 1, 2;...
                                                   4, 1, 3], '16 Ch DigIO'; ...
    'EP2624',...
        hex2dec('0a404052'), hex2dec('00100002'), [8, 0, 0], '4Ch Relay'; ...
    'EP2624-0002',...
        hex2dec('0a404052'), hex2dec('00110002'), [8, 0, 0], '4Ch Relay'; ...
    'EP2809-0021',...
        hex2dec('0af94052'), hex2dec('00100015'), [1, 0, 0;...
                                                   2, 0, 1], '16Ch DigOut'; ...
    'EP2809-0022',...
        hex2dec('0af94052'), hex2dec('00100016'), [1, 0, 0;...
                                                   2, 0, 1], '16Ch DigOut'; ...
    };

switch nargin
case 2
    pos = cell2mat(models(:,2)) == varargin{1}...
        & cell2mat(models(:,3)) == varargin{2};
    product = models(pos,:);

case 1
    product = models(strcmp(models(:,1),varargin{1}),:);

otherwise
    fields = models(:,1);
    obsolete = cellfun(@length, fields) > 11;
    rv = vertcat(sort(fields(~obsolete)), sort(fields(obsolete)));
    return
end

if isempty(product)
    rv = [];
    return;
end

rv.vendor = 2;
rv.description = product{1};
rv.product = product{2};
rv.revision = product{3};
sm_def = product{4};
rv.sm = arrayfun(...
        @(x) {sm_def(x,3), sm_def(x,2), sm{sm_def(x,1)}},...
        1:size(sm_def,1), 'UniformOutput', false);

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function rv = port_config(Sm)
% Populate the blocks output port(s)

rv = [];

rv.output = get_entries(Sm, 1);
rv.input  = get_entries(Sm, 0);

return

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function port = get_entries(Sm, dir)
outputs = cellfun(@(x) x{2}, Sm) == dir;

if ~any(outputs)
    port = [];
    return
end

outputs_idx = num2cell(0:numel(outputs)-1);
pdo = cellfun(...
        @(sm_idx,sm) horzcat(repmat({sm_idx},fliplr(size(sm{3}))),...
                                num2cell(0:numel(sm{3})-1)',...
                                sm{3}'), ...
        outputs_idx(outputs), Sm(outputs),...
        'UniformOutput', false);
pdo = vertcat(pdo{:});

entries = arrayfun(...
        @(x) horzcat(repmat([pdo{x,[1 2]}], size(pdo{x,3}{2},1), 1),...
                        (0:size(pdo{x,3}{2},1)-1)',...
                        zeros(size(pdo{x,3}{2},1),1),...
                        pdo{x,3}{2}(:,1)),...
        1:size(pdo,1), 'UniformOutput', false)';
sub_index = cell2mat(entries);
sub_index = sub_index(sub_index(:,5) ~= 0, 1:4);

if strcmp(get_param(gcbh,'vector'),'on')
    port.pdo = sub_index;
    port.pdo_data_type = 1001;
else
    port = arrayfun(@(x) struct('pdo', sub_index(x,:),...
                                'pdo_data_type', 1001), 1:size(sub_index,1));
end

return
