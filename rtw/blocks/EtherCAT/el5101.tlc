%implements "el5101" "C"

%%
%% Hardware Driver for Beckhoff's EtherCAT Incremental Encoder Input 
%% device EL5101
%% 
%% This TLC Implements the necessary IO Functions to communicate
%% with the EtherCAT Driver enabling the usage of an Incremental Encoder Input
%%
%% Copyright (C) 2006
%% Richard Hacker
%% IgH Essen GmbH
%% 
%% License: GPL

%include "EtherCAT.tlc"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockTypeSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCAT()>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function BlockInstanceSetup( block, system ) void
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %<InitEtherCATTask(block, system)>
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Start(block, system) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  %if FreqPort != -1 || PeriodPort != -1 || WindowPort != -1
      %% If one of the above ports are used, we have to remap
      %% the PDO's to make them available
      %assign TxPDOMap = ["0x1A00", "0x1A02"]
  %endif
  %assign SlaveOutput = 0
  %if ControlPort != -1 || PresetPort != -1
    %assign SlaveOutput = 1
  %endif
  %%
  %switch Gate
    %case 2
      %% Enable Positive Gate
      %assign PosGate = 1
      %assign NegGate = 0
    %break
    %case 3
      %% Enable Negative Gate
      %assign PosGate = 0
      %assign NegGate = 1
    %break
    %default
      %assign PosGate = 0
      %assign NegGate = 0
    %break
  %endswitch
  %%
  %%

  /* %<Type> Block: %<Name> 
   * Registering Incremental Encoder with EtherCAT Driver
   */
  %<RegisterEtherCATSlaveBlock(block, "Beckhoff_EL5101", MasterId, \
            SlaveAddr, SlaveOutput)>
  %if EXISTS(TxPDOMap)
    %<RegisterEtherCATSlavePDOMap(block, "T", TxPDOMap)>
  %endif
  /* Enable Register Reload */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x8000", 1, Reload)>
  /* Enable Index Reset */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x8000", 2, IndexReset)>
  /* Enable FWD Count */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x8000", 3, FwdCount)>
  /* Enable Positive Gate */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x8000", 4, PosGate)>
  /* Enable Negative Gate */
  %<RegisterEtherCATSlaveSDO(block, 8, "0x8000", 5, NegGate)>
  /* Frequency Window */
  %<RegisterEtherCATSlaveSDO(block, 16, "0x8001", 1, FreqWin)>
  /* Counter Reload Value */
  %<RegisterEtherCATSlaveSDO(block, 16, "0x8001", 2, ReloadValue)>
  %if ControlPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Ctrl", \
        LibBlockPWork(InPtr,"","",ControlPort))>
  %endif
  %if PresetPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_OutputValue", \
        LibBlockPWork(InPtr,"","",PresetPort))>
  %endif
  %if ValuePort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Value", \
        LibBlockPWork(OutPtr,"","",ValuePort))>
  %endif
  %if LatchPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Latch", \
        LibBlockPWork(OutPtr,"","",LatchPort))>
  %endif
  %if FreqPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Frequency", \
        LibBlockPWork(OutPtr,"","",FreqPort))>
  %endif
  %if PeriodPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Period", \
        LibBlockPWork(OutPtr,"","",PeriodPort))>
  %endif
  %if WindowPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Window", \
        LibBlockPWork(OutPtr,"","",WindowPort))>
  %endif
  %if StatusPort != -1
    %<RegisterEtherCATSlavePDO(block, "Beckhoff_EL5101_PDO_Status", \
        LibBlockPWork(OutPtr,"","",StatusPort))>
  %endif
%endfunction


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Outputs( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  /* %<Type> block: %<Name> 
   */
  %if ValuePort != -1
    %<LibBlockOutputSignal(ValuePort,"","",0)> = \
        *(uint16_t *)%<LibBlockPWork(OutPtr,"","",ValuePort)>;
  %endif
  %if LatchPort != -1
    %<LibBlockOutputSignal(LatchPort,"","",0)> = \
        *(uint16_t *)%<LibBlockPWork(OutPtr,"","",LatchPort)>;
  %endif
  %if FreqPort != -1
    %<LibBlockOutputSignal(FreqPort,"","",0)> = \
        *(uint32_t *)%<LibBlockPWork(OutPtr,"","",FreqPort)>;
  %endif
  %if PeriodPort != -1
    %<LibBlockOutputSignal(PeriodPort,"","",0)> = \
        *(uint16_t *)%<LibBlockPWork(OutPtr,"","",PeriodPort)>;
  %endif
  %if WindowPort != -1
    %<LibBlockOutputSignal(WindowPort,"","",0)> = \
        *(uint16_t *)%<LibBlockPWork(OutPtr,"","",WindowPort)>;
  %endif
  %if StatusPort != -1
    %<LibBlockOutputSignal(StatusPort,"","",0)> = \
        *(uint8_t *)%<LibBlockPWork(OutPtr,"","",StatusPort)>;
  %endif
%endfunction

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function Update( block, system ) Output
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  /* %<Type> block: %<Name> 
   */
  %if ControlPort != -1
    *(uint8_t *)%<LibBlockPWork(InPtr,"","",ControlPort)> = \
       %<LibBlockInputSignal(ControlPort,"","",0)>;
  %endif
  %if PresetPort != -1
    *(uint16_t *)%<LibBlockPWork(InPtr,"","",PresetPort)> = \
       %<LibBlockInputSignal(PresetPort,"","",0)>;
  %endif
%endfunction
