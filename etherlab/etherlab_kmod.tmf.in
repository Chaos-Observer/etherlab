# Copyright 2005 IgH Essen GmbH
#
# Abstract:
#	Real-Time Workshop template makefile for building a 
#	RTAI Kernel Module of a Simulink model
#
# 	This makefile attempts to conform to the guidelines specified in the
# 	IEEE Std 1003.2-1992 (POSIX) standard. It is designed to be used
#       with GNU Make which is located in matlabroot/rtw/bin.
#
# 	Note that this template is automatically customized by the Real-Time
#	Workshop build procedure to create "<model>.mk"
#
#       The following defines can be used to modify the behavior of the
#	build:
#	  OPT_OPTS       - Optimization options. Default is -O. To enable
#                          debugging specify as OPT_OPTS=-g.
#                          Because of optimization problems in IBM_RS,
#                          default is no-optimization.
#	  CPP_OPTS       - C++ compiler options.
#	  OPTS           - User specific compile options.
#	  USER_SRCS      - Additional user sources, such as files needed by
#			   S-functions.
#	  USER_INCLUDES  - Additional include paths
#			   (i.e. USER_INCLUDES="-Iwhere-ever -Iwhere-ever2")
#
#       This template makefile is designed to be used with a system target
#       file that contains 'rtwgensettings.BuildDirSuffix' see grt.tlc

#------------------------ Macros read by make_rtw ------------------------------
#
# The following macros are read by the Real-Time Workshop build procedure:
#
#  MAKECMD         - This is the command used to invoke the make utility
#  HOST            - What platform this template makefile is targeted for
#                    (i.e. PC or UNIX)
#  BUILD           - Invoke make from the Real-Time Workshop build procedure
#                    (yes/no)?
#  SYS_TARGET_FILE - Name of system target file.

MAKECMD         = make
HOST            = UNIX
BUILD           = yes
SYS_TARGET_FILE = etherlab.tlc

#---------------------- Tokens expanded by make_rtw ----------------------------
#
# The following tokens, when wrapped with "|>" and "<|" are expanded by the
# Real-Time Workshop build procedure.
#
#  MODEL_NAME          - Name of the Simulink block diagram
#  MODEL_MODULES       - Any additional generated source modules
#  MAKEFILE_NAME       - Name of makefile created from template makefile <model>.mk
#  MATLAB_ROOT         - Path to were MATLAB is installed.
#  S_FUNCTIONS         - List of S-functions.
#  S_FUNCTIONS_LIB     - List of S-functions libraries to link.
#  SOLVER              - Solver source file name
#  NUMST               - Number of sample times
#  TID01EQ             - yes (1) or no (0): Are sampling rates of continuous task
#                        (tid=0) and 1st discrete task equal.
#  NCSTATES            - Number of continuous states
#  COMPUTER            - Computer type. See the MATLAB computer command.
#  BUILDARGS           - Options passed in at the command line.
#  MULTITASKING        - yes (1) or no (0): Is solver mode multitasking
#  EXT_MODE            - yes (1) or no (0): Build for external mode
#  TMW_EXTMODE_TESTING - yes (1) or no (0): Build ext_test.c for external mode
#                        testing.
#  EXTMODE_TRANSPORT   - Index of transport mechanism (e.g. tcpip, serial) for extmode
#  EXTMODE_STATIC      - yes (1) or no (0): Use static instead of dynamic mem alloc.
#  EXTMODE_STATIC_SIZE - Size of static memory allocation buffer.
#  GEN_MDLREF_SFCN     - (1/0): are we generating model reference wrapper s-function
#  TGT_FCN_LIB         - Target Funtion library to use
#  MODELREFS           - List of referenced models

MODEL                = |>MODEL_NAME<|
MODULES              = |>MODEL_MODULES<|
MAKEFILE             = |>MAKEFILE_NAME<|
MATLAB_ROOT          = |>MATLAB_ROOT<|
ALT_MATLAB_ROOT      = |>ALT_MATLAB_ROOT<|
S_FUNCTIONS          = |>S_FUNCTIONS<|
S_FUNCTIONS_LIB      = |>S_FUNCTIONS_LIB<|
SOLVER               = |>SOLVER<|
NUMST                = |>NUMST<|
TID01EQ              = |>TID01EQ<|
NCSTATES             = |>NCSTATES<|
COMPUTER             = |>COMPUTER<|
BUILDARGS            = |>BUILDARGS<|
MULTITASKING         = |>MULTITASKING<|
TMW_EXTMODE_TESTING  = |>TMW_EXTMODE_TESTING<|
MEXEXT               = |>MEXEXT<|
TGT_FCN_LIB          = |>TGT_FCN_LIB<|
MODELREFS            = |>MODELREFS<|
SHARED_SRC           = |>SHARED_SRC<|
SHARED_SRC_DIR       = |>SHARED_SRC_DIR<|
SHARED_BIN_DIR       = |>SHARED_BIN_DIR<|
SHARED_LIB           = |>SHARED_LIB<|
TARGET_LANG_EXT      = |>TARGET_LANG_EXT<|

OVERRUNMAX	     := |>OVERRUNMAX<|
BUFFER_TIME	     := |>BUFFER_TIME<|
STACKSIZE            := |>STACKSIZE<|
DOWNSAMPLE           := |>DOWNSAMPLE<|
VERBOSE              := |>VERBOSE_BUILD<|

ETHERLAB_DIR         := @prefix@
#GZIP                 := @GZIP@
ED                   := @ED@
SED                  := @SED@
GREP                 := @GREP@

MODELVERSION 	     = $(shell $(GREP) -m1 "Model Version" $(MODEL).h | $(SED) "s/.*: *\([^[:space:]]*\).*/\1/")

#--------------------------- Model and reference models -----------------------
MODELLIB                  = |>MODELLIB<|
MODELREF_LINK_LIBS        = |>MODELREF_LINK_LIBS<|
MODELREF_INC_PATH         = |>START_MDLREFINC_EXPAND_INCLUDES<|-I|>MODELREF_INC_PATH<| |>END_MDLREFINC_EXPAND_INCLUDES<|
RELATIVE_PATH_TO_ANCHOR   = |>RELATIVE_PATH_TO_ANCHOR<|
# NONE: standalone, SIM: modelref sim, RTW: modelref rtw
MODELREF_TARGET_TYPE       = |>MODELREF_TARGET_TYPE<|

#-- In the case when directory name contains space ---
ifneq ($(MATLAB_ROOT),$(ALT_MATLAB_ROOT))
MATLAB_ROOT := $(ALT_MATLAB_ROOT)
endif

#--------------------------- Tool Specifications -------------------------------

include $(ETHERLAB_DIR)/etherlab/etherlab_tools.mk

#------------------------------ Include Path -----------------------------------

MATLAB_INCLUDES = \
	-I$(MATLAB_ROOT)/simulink/include \
	-I$(MATLAB_ROOT)/extern/include \
	-I$(MATLAB_ROOT)/rtw/c/src \
	-I$(MATLAB_ROOT)/rtw/c/src/ext_mode/common

# Additional file include paths
ADD_INCLUDES = \
|>START_EXPAND_INCLUDES<|	-I|>EXPAND_DIR_NAME<| \
|>END_EXPAND_INCLUDES<|

SHARED_INCLUDES =
ifneq ($(SHARED_SRC_DIR),)
SHARED_INCLUDES = -I$(SHARED_SRC_DIR) 
endif

INCLUDES = -I. -I$(RELATIVE_PATH_TO_ANCHOR) $(MATLAB_INCLUDES) \
   $(ADD_INCLUDES) $(USER_INCLUDES) $(INSTRUMENT_INCLUDES) \
   $(MODELREF_INC_PATH) $(SHARED_INCLUDES)

#----------------------------- External mode -----------------------------------
# Uncomment -DVERBOSE to have information printed to stdout
# To add a new transport layer, see the comments in
#   <matlabroot>/toolbox/simulink/simulink/extmode_transports.m
ifeq ($(EXT_MODE),1)
  EXT_CC_OPTS = -DEXT_MODE -D$(COMPUTER) #-DVERBOSE
  EXT_LIB     =
  EXT_SRC = ext_svr.c updown.c ext_work.c ext_svr_tcpip_transport.c
  ifeq ($(TMW_EXTMODE_TESTING),1)
    EXT_SRC     += ext_test.c
    EXT_CC_OPTS += -DTMW_EXTMODE_TESTING
  endif
  ifeq ($(EXTMODE_STATIC),1)
    EXT_SRC             += mem_mgr.c
    EXT_CC_OPTS         += -DEXTMODE_STATIC -DEXTMODE_STATIC_SIZE=$(EXTMODE_STATIC_SIZE)
  endif
endif

#----------------------------- Real-Time Model ---------------------------------
RTM_CC_OPTS = -DUSE_RTMODEL

#-------------------------------- C Flags --------------------------------------

# Optimization Options
ifndef OPT_OPTS
OPT_OPTS = $(DEFAULT_OPT_OPTS)
endif

# General User Options
OPTS = -DOVERRUNMAX=$(OVERRUNMAX) -DMODELVERSION=$(MODELVERSION) \
		-DBUFFER_TIME=$(BUFFER_TIME) -DSTACKSIZE=$(STACKSIZE) \
                -DDOWNSAMPLE=$(DOWNSAMPLE)

# Compiler options, etc:
CC_OPTS = $(CODE_DEBUG) $(OPT_OPTS) $(OPTS) $(EXT_CC_OPTS) $(RTM_CC_OPTS)

CPP_REQ_DEFINES = -DMODEL=$(MODEL) -DRT -DNUMST=$(NUMST) \
                  -DTID01EQ=$(TID01EQ) -DNCSTATES=$(NCSTATES) -DUNIX \
                  -DMULTITASKING=$(MULTITASKING)


LOCAL_CFLAGS   = $(CC_OPTS) $(ANSI_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES)
LOCAL_CPPFLAGS = $(CPP_OPTS) $(CC_OPTS) $(CPP_ANSI_OPTS) $(CPP_REQ_DEFINES) $(INCLUDES)
#-------------------------- Additional Libraries ------------------------------

SYSLIBS = $(EXT_LIB)

LIBS =
|>START_PRECOMP_LIBRARIES<|
ifeq ($(OPT_OPTS),$(DEFAULT_OPT_OPTS))
LIBS += |>EXPAND_LIBRARY_LOCATION<|/|>EXPAND_LIBRARY_NAME<|_std.a
else
LIBS += |>EXPAND_LIBRARY_NAME<|.a
endif
|>END_PRECOMP_LIBRARIES<| |>START_EXPAND_LIBRARIES<|
LIBS += |>EXPAND_LIBRARY_NAME<|.a |>END_EXPAND_LIBRARIES<|
LIBS += $(S_FUNCTIONS_LIB) $(INSTRUMENT_LIBS)

#----------------------------- Source Files ------------------------------------

USER_SRCS = 

USER_OBJS       = $(addsuffix .o, $(basename $(USER_SRCS)))
LOCAL_USER_OBJS = $(notdir $(USER_OBJS))


SRCS  = $(filter-out %_capi.c,$(MODULES)) $(S_FUNCTIONS)

# Object target that will be used together with $(MODULE_MAIN_SRC) to
# become a kernel object (.ko) during the KBuild process
MODEL_BINARY       := $(MODEL)_obj.o_shipped

# Source for the module main ( module_init() and module_exit() )
MODULE_MAIN_SRC    := rtai_reg_mdl.c

KERNEL_MODULE      := $(MODEL)_kmod.ko

RUN	:= $(RELATIVE_PATH_TO_ANCHOR)/run
RUNINFO	:= $(RELATIVE_PATH_TO_ANCHOR)/.runinfo

# Files needed for Model Symbols
SYMBOL_SRCS      := $(filter %_capi.c,$(MODULES)) \
                        $(filter %_data.c,$(MODULES))
SYMBOL_OBJS      := $(SYMBOL_SRCS:.c=.o)

# Differentiate between builds for Model Referencing and Standard
#   Model Referending: only create a library
#   Standard: Make kernel modules and user helper process
ifeq ($(MODELREF_TARGET_TYPE), NONE)
    PRODUCT = $(RELATIVE_PATH_TO_ANCHOR)/$(KERNEL_MODULE) 
#              $(MODEL_SO) $(RUNINFO)
#              $(MODEL_SO) $(RUN) $(RUNINFO)
    SRCS    += $(MODEL)_nocapi.$(TARGET_LANG_EXT) rt_sim.c $(SOLVER)
    BUILD_PRODUCT_TYPE = "kernel module"
else
    # Model reference rtw target
    PRODUCT            = $(MODELLIB)
    BUILD_PRODUCT_TYPE = "library"
endif

LINK_OBJS = $(addsuffix .o, $(basename $(SRCS))) $(LOCAL_USER_OBJS)

SHARED_SRC := $(wildcard $(SHARED_SRC))
SHARED_OBJS = $(addsuffix .o, $(basename $(SHARED_SRC)))

DEP = -Wp,-MMD,.$@.dep

#------------- Test Compile using gcc -Wall to look for warnings ---------------
#
# DO_GCC_TEST=1 runs gcc with compiler warning flags on all the source files
# used in this build. This includes the generated code, and any user source
# files needed for the build and placed in this directory.
#
# WARN_ON_GLNX=1 runs the linux compiler with warnings flags. On hand-written
# code we use the max amount of flags availabe while on the generated code, a
# few less.
#
# See rtw/c/tools/unixtools.mk for the definition of GCC_WARN_OPTS
GCC_TEST_CMD  := echo
GCC_TEST_OUT  := > /dev/null
ifeq ($(DO_GCC_TEST), 1)
  GCC_TEST := gcc -c -o /dev/null $(GCC_WARN_OPTS_MAX) $(CPP_REQ_DEFINES) \
                                     $(INCLUDES)
  GCC_TEST_CMD := echo; echo "\#\#\# GCC_TEST $(GCC_TEST) $<"; $(GCC_TEST)
  GCC_TEST_OUT := ; echo
endif

GCC_WALL_FLAG     :=
GCC_WALL_FLAG_MAX :=
ifeq ($(COMPUTER), GLNX86)
ifeq ($(WARN_ON_GLNX), 1)
  GCC_WALL_FLAG     := $(GCC_WARN_OPTS)
  GCC_WALL_FLAG_MAX := $(GCC_WARN_OPTS_MAX)
endif
endif

#--------------------------------- Rules ---------------------------------------

ifneq ($(KERNELRELEASE),)
#######################################################################
#  >>>> START OF KBUILD PART <<<<
#  This part of the general makefile will only be used during the 
#  kernel build part of the make
#######################################################################

EXTRA_CFLAGS	:= $(CODE_DEBUG) $(RTAI_FLAGS) -I$(ETHERLAB_DIR)/include \
		-I$(ETHERLAB_DIR)/src/kernel
obj-m		:= $(KERNEL_MODULE:.ko=.o)
$(KERNEL_MODULE:.ko=)-y := $(MODULE_MAIN_SRC:.c=.o) $(MODEL_BINARY) msf.o

#######################################################################
#  >>>> END OF KBUILD PART <<<<
#######################################################################
else # ($(KERNELRELEASE))
#normal makefile

ifeq ($(MODELREF_TARGET_TYPE),NONE)
all: $(PRODUCT)
	@echo "### Created $(BUILD_PRODUCT_TYPE): $^"
else
$(PRODUCT) : $(LINK_OBJS) $(SHARED_LIB) $(LIBS)
	@rm -f $(MODELLIB)
	ar ruvs $(MODELLIB) $(LINK_OBJS)
	@echo "### Created $(MODELLIB)"
	@echo "### Created $(BUILD_PRODUCT_TYPE): $@"
endif

ifeq ($(VERBOSE),1)
cc = $(CC)
ld = $(LD)
ar = $(AR)
else
cc = @echo -e "  CC\t" $@ && $(CC)
ld = @echo -e "  LD\t" $@ && $(LD)
ar = @echo -e "  AR\t" $@ && $(AR)
endif
ed = "  ED\t" $@

DEPFILES := $(wildcard .*.dep)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

###################
# Level 1 targets
###################
$(RUN): $(ETHERLAB_DIR)/tools/rt_kernel/$(notdir $(RUN))
	@cp $< $@
	@chmod 755 $@

$(RUNINFO)::
	@echo "$(MODEL):up+sem:push rt_kernel;push $(KERNEL_MODULE:.ko=);:" > $@

.INTERMEDIATE: $(KERNEL_MODULE)
$(RELATIVE_PATH_TO_ANCHOR)/$(KERNEL_MODULE): $(KERNEL_MODULE)
	@mv $< $@

$(KERNEL_MODULE): $(MODULE_MAIN_SRC) $(MODEL_BINARY) Makefile msf.c
	# Call KBuild process
	@sh -c "unset ARCH; make -C $(KERNEL_DIR) V=$(VERBOSE) M=$(shell pwd) modules"

###################
# Level 2 targets
###################
# Copy $(MODULE_MAIN_SRC) to local dir. KBuild needs it there
$(MODULE_MAIN_SRC): $(ETHERLAB_DIR)/src/kernel/$(MODULE_MAIN_SRC)
	@cp $< $@

# Create <model>.o_shipped object for use in KBuild
$(MODEL_BINARY): $(LINK_OBJS) $(SHARED_LIB) $(LIBS) $(MODELREF_LINK_LIBS) mdl_wrapper.o
	$(ld) $(LDFLAGS) -r -o $@ $^
	@echo "### Created $@"

# Link $(MODEL).mk -> Makefile for easier making by hand
Makefile: $(MAKEFILE)
	# Creating link to $(MAKEFILE)
	@rm -f $@
	@ln -sf $< $@

# Generate model symbol file
msf.c: $(MODEL).xml $(MODEL).so
	@echo Generating $@
	@$(ETHERLAB_DIR)/bin/gen_msf.py $@ $(MODEL).so $(MODEL).xml

###################
# Level 3 targets
###################
$(MODEL).o : $(MODEL)_nocapi.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG) $<

$(MODEL).xml: gen_msf
	@echo Generating XML Model Symbol File $(MODEL).xml
	@./$< > $@

$(MODEL).so: $(SYMBOL_OBJS) etherlab_buddy_data.o model_reg.o
	$(cc) -shared -fpic -nostartfiles -o $@ $^

###################
# Level 4 targets
###################
dump_capi.o: $(ETHERLAB_DIR)/src/buddy/dump_capi.c capi_init.c capi.h
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) \
                `xml2-config --cflags` $(GCC_WALL_FLAG_MAX) -o $@ $<

model_reg.o: $(ETHERLAB_DIR)/src/buddy/model_reg.c capi_init.c capi.h
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) -o $@ $<

# Remove all traces to the C-API from model.
$(MODEL)_nocapi.c: $(MODEL).c
	@echo -e $(ed)
	@echo -e "e $<\n /capi.h/d\n /C API/\n .,+d\n w $@\n q\n" | \
                $(ED) -s >/dev/null

gen_msf: $(SYMBOL_OBJS) etherlab_buddy_data.o dump_capi.o
	$(cc) -o $@ $^ `xml2-config --libs`

###################
# Level 5 targets
###################
# The C-API is required in the buddy process though, and not in <model>.c
capi_init.c: $(MODEL).c
	@echo -e $(ed)
	@echo -e "e $<\n /C API/\n .,+d\n 0x\n 3\n ;d\n w $@\n q\n" | \
                $(ED) -s >/dev/null

capi.h: $(MODEL).c
	@echo -e $(ed)
	@echo -e "e $<\n /capi.h/d\n 0x\n 2\n ;d\n w $@\n q\n" | \
                $(ED) -s >/dev/null

###################
# Various targets on demand
###################
%.o : %.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG) $<

%.o : $(RELATIVE_PATH_TO_ANCHOR)/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG) $<

%.o : $(ETHERLAB_DIR)/blocks/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(ETHERLAB_DIR)/src/buddy/%.c
	@$(GCC_TEST_CMD) $(LOCAL_CFLAGS) -I$(ETHERLAB_DIR)/include \
                $(RTAI_FLAGS) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) -I$(ETHERLAB_DIR)/include \
                $(GCC_WALL_FLAG_MAX) $<

%.o : $(ETHERLAB_DIR)/src/kernel/%.c
	@$(GCC_TEST_CMD) $(LOCAL_CFLAGS) $(RTAI_FLAGS) $< $(GCC_TEST_OUT)
	$(cc) $(DEP) -c $(LOCAL_CFLAGS) $(RTAI_FLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/common/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/tcpip/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

%.o : $(MATLAB_ROOT)/rtw/c/src/ext_mode/custom/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

|>START_EXPAND_RULES<|%.o : |>EXPAND_DIR_NAME<|/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

|>END_EXPAND_RULES<|

%.o : $(MATLAB_ROOT)/simulink/src/%.c
	@$(GCC_TEST_CMD) $< $(GCC_TEST_OUT)
	$(cc) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $<

#------------------------------- Libraries -------------------------------------

|>START_EXPAND_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|	|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### $@ Created "

|>END_EXPAND_LIBRARIES<|

|>START_PRECOMP_LIBRARIES<|MODULES_|>EXPAND_LIBRARY_NAME<| = \
|>START_EXPAND_MODULES<|	|>EXPAND_MODULE_NAME<|.o \
|>END_EXPAND_MODULES<|

.INTERMEDIATE: $(MODULES_|>EXPAND_LIBRARY_NAME<|)
|>EXPAND_LIBRARY_NAME<|.a : rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
#|>EXPAND_LIBRARY_NAME<|.a : $(MAKEFILE) rtw_proj.tmw $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### Creating $@ "
	ar rs $@ $(MODULES_|>EXPAND_LIBRARY_NAME<|)
	@echo "### $@ Created "

|>END_PRECOMP_LIBRARIES<|

#----------------------------- Dependencies ------------------------------------

$(LINK_OBJS) : $(MAKEFILE) rtw_proj.tmw

$(SHARED_LIB) : $(SHARED_SRC)
	@echo "### Creating $@ "
	cd $(SHARED_BIN_DIR); $(CC) -c $(LOCAL_CFLAGS) $(GCC_WALL_FLAG_MAX) $(notdir $?)
	ar ruvs $@ $(SHARED_OBJS)
	@echo "### $@ Created  "


#--------- Miscellaneous rules to purge, clean ---------------------------------

purge : clean
	@echo "### Deleting the generated source code for $(MODEL)"
	@\rm -f $(MODEL).c $(MODEL).h $(MODEL)_types.h $(MODEL)_data.c \
	        $(MODEL)_private.h $(MODEL).rtw $(MODULES) rtw_proj.tmw $(MAKEFILE)

clean :
	@echo "### Deleting the objects and $(PRODUCT)"
	@\rm -f $(LINK_OBJS) $(PRODUCT) .*.dep

endif # ($(KERNELRELEASE))

# EOF: etherlab_kmod.tmf
