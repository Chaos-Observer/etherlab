#!/usr/bin/env python

import zlib
import os.path
import sys

from xml.dom.minidom import parse


try:
  dom = parse(sys.argv[1])
except:
  print "Something went wrong while trying to parse %s." % sys.argv[1]
  sys.exit(1)

applicationdescription = dom.getElementsByTagName("applicationdescription")[0]
applicationname = applicationdescription.getAttribute("applicationname")

data_hdr = open(applicationname+'_data.h', 'w')
data_file = open(applicationname+'_data.c', 'w')
capi = open(applicationname+'_capi.c', 'w')

data_hdr.write("""\
/* application data header file
 *
 * This file defines data structures that define the application's signals and parameters.
 * 
 * Do not edit this file, its was automatically generated from:
 * %s
 * 
 * Generated by: 
 * $Id$
 * 
 */

#include "application_defines.h"

/* application signals */
struct rtB {
""" % sys.argv[1])

capi.write("""\
/*
 * application description file.
 * 
 * This file is used to determine 
 * 
 * 
 * 
 */
#include "capi.h"

static const struct capi_signal capi_signal[] = {
""")

data_file.write("""\
#include %s_data.h

struct rtB rtB;

struct rtP rtP = {
""" % applicationname)

signals = applicationdescription.getElementsByTagName("signals")[0]
for s in signals.getElementsByTagName("signal"):
    try:
        width = int(s.getAttribute("dimension"))
    except:
        width = 0
        
    signal_name = s.getAttribute("id")
    datatype = s.getAttribute("datatype")
    data_hdr.write( "  %s %s" % (datatype, signal_name))
    if width:
        data_hdr.write("[%i]" % width)
    data_hdr.write(";\n")

    path = s.getElementsByTagName('path')
    if path: path = path[0].childNodes[0].data
    else: path = signal_name

    if width:
        capi.write('   { "%s",\n     "%s", %i, &rtB.%s[0] - &rtB},\n' 
            % (path, datatype, width, signal_name))
    else:
        capi.write('   { "%s",\n     "%s", %i, &rtB.%s - &rtB},\n' 
            % (path, datatype, width, signal_name))

data_hdr.write("""\
};

/* application parameters */
struct rtP {
""")

capi.write("""\
};

static const struct capi_parameter capi_parameter[] = {
""")

parameters = applicationdescription.getElementsByTagName("parameters")[0]
for p in parameters.getElementsByTagName("parameter"):
    try:
        width = int(p.getAttribute("dimension"))
    except:
        width = 0
        
    parameter_name = p.getAttribute("id")
    datatype = s.getAttribute("datatype")
    data_hdr.write( "  %s %s" % (p.getAttribute("datatype"), parameter_name))
    if width:
        data_hdr.write("[%i]" % width)
    data_hdr.write(";\n")

    path = p.getElementsByTagName('path')
    if path: path = path[0].childNodes[0].data
    else: path = parameter_name

    if width:
        capi.write('   { "%s",\n     "%s", %i, &rtP.%s[0] - &rtP},\n' 
            % (path, datatype, width, parameter_name))
    else:
        capi.write('   { "%s",\n     "%s", %i, &rtP.%s - &rtP},\n'
            % (path, datatype, width, parameter_name))

    if width:
        data_file.write('  .%s = {' % parameter_name) 
        for i in p.getElementsByTagName('value'):
            data_file.write('%s, ' % i.childNodes[0].data)
        data_file.write('},\n')
    else:
        data_file.write('  .%s = %s,\n' % (parameter_name, p.getAttribute('value')));

data_hdr.write("""\
};
""")

data_file.write("""\
};
""")

capi.write("""\
};
""")
