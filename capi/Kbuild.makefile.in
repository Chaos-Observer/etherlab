##############################################################################
#
# $Id: Kbuild.makefile.in 266 2008-04-11 14:58:33Z ha $
#
# This is the kernel makefile for the EtherLab C-API. 
#
# Copyright (C) 2008 Richard Hacker
# License: GPLv3
#
##############################################################################

#
# Enter the name of your application here. This will be the file name of the
# kernel object that is created. This is also the name of the Model Description
# File .xml file.
#
# Requirement: Mandatory
#
APP_NAME = my-app

#
# List the application sources here. Only .c files are supported. No absolute
# paths are allowed; the files have to be in the current directory or lower.
#
# Requirement: Mandatory
#
APP_SOURCES = 

#
# CFLAGS with which your application will be built. Here you can conveniently
# add include paths for your application.
#
# Requirement: Optional
#
#APP_CFLAGS = -I/custom/include

#
# Paths
#
ETHERLAB_DIR = @STAGING_DIR@/@prefix@
LINUX_DIR = @LINUX_DIR@
RTAI_DIR = @STAGING_DIR@/@RTAI_DIR@
STAGING_DIR = @STAGING_DIR@ 

######## END OF USER CONFIGURABLE PART #######################################

ifeq ($(KERNELRELEASE),)

modules %: .linted $(APP_SOURCES)
	$(MAKE) -C $(LINUX_DIR) M=$(shell pwd) $@

.linted: $(APP_NAME).xml
	xmllint --schema $(ETHERLAB_DIR)/capi/rt_application.xsd $^ > $@

else #ifeq ($(KERNELRELEASE),)

EXTRA_CFLAGS = \
        -I$(ETHERLAB_DIR)/include \
        -I$(RTAI_DIR)/include \
        -I$(src) \
        $(APP_CFLAGS) \
        -DAPP_NAME=$(APP_NAME)

EXTRA_CFLAGS += $(shell DESTDIR=$(STAGING_DIR) \
	$(RTAI_DIR)/bin/rtai-config --module-cflags)

obj-m := $(APP_NAME).o
$(APP_NAME)-y := app_main.o data.o $(APP_SOURCES:.c=.o) \
        .src/register.o .src/rt_app_main.o application_description.o
# Additionally mark the source files in .src as SECONDARY, so they are 
# not deleted, since they are needed by modpost.
.SECONDARY: $(obj)/.src/register.c $(obj)/.src/rt_app_main.c

clean-dirs := .src
clean-files := \
    .*.dep \
    .linted \
    data.c \
    application_description.c \
    application_defines.h \
    param.h \
    signal.h

# Kbuild can only compile files that are local to $(obj).
# If a file exists in the source distribution, copy it locally.
$(obj)/.src/%: $(ETHERLAB_DIR)/capi/%
	$(Q)mkdir -p $(obj)/.src
	$(Q)cp $< $@

HEADERS = $(obj)/param.h $(obj)/signal.h
APP_DEFINES = $(obj)/application_defines.h

$(obj)/data.o: $(obj)/data.c $(HEADERS) $(APP_DEFINES)

$(obj)/app_main.o: $(HEADERS) $(APP_DEFINES)

$(obj)/application_description.o: $(obj)/application_description.c \
        $(HEADERS) $(APP_DEFINES)

quiet_cmd_xsltproc := XSLTPROC $@

XSL_CMD = $(basename $(notdir $@))
$(HEADERS): $(obj)/$(APP_NAME).xml
	@XSLTPROC@ --stringparam header_type $(XSL_CMD) \
                $(ETHERLAB_DIR)/capi/header.xsl $< | @INDENT@ > $@

XSLTFILE = $(ETHERLAB_DIR)/capi/$(notdir $@).xsl
$(APP_DEFINES) $(obj)/data.c $(obj)/application_description.c: \
                $(obj)/$(APP_NAME).xml
	@XSLTPROC@ $(XSLTFILE) $< | @INDENT@ > $@

endif #ifeq ($(KERNELRELEASE),)

##############################################################################
